import { Router, Request, Response } from 'express';
import { aiService } from '../services/aiService';
import { 
  AIPersonalizeRequest, 
  AICompanionRequest, 
  ApiResponse, 
  AIResponse 
} from '../../../shared/src/types';
import { logger } from '../utils/logger';

const router = Router();

/**
 * „Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„É¢„Éº„Éâ - Â≠¶ÁøíË®àÁîª„ÅÆË®≠Ë®àÂõ≥‰ΩúÊàê
 * POST /api/ai/personalize
 */
router.post('/personalize', async (req: Request, res: Response) => {
  try {
    const request: AIPersonalizeRequest = req.body;
    
    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    if (!request.studentId || !request.message) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'INVALID_REQUEST',
          message: 'studentId and message are required'
        }
      } as ApiResponse<never>);
    }

    const response = await aiService.processPersonalizeMode(request);
    
    res.json({
      success: true,
      data: response
    } as ApiResponse<AIResponse>);

  } catch (error) {
    logger.error('Error in personalize endpoint:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'INTERNAL_SERVER_ERROR',
        message: 'Failed to process personalize request'
      }
    } as ApiResponse<never>);
  }
});

/**
 * ‰º¥Ëµ∞„É¢„Éº„Éâ - Êó•„ÄÖ„ÅÆÂ≠¶Áøí„Çµ„Éù„Éº„Éà
 * POST /api/ai/companion
 */
router.post('/companion', async (req: Request, res: Response) => {
  try {
    const request: AICompanionRequest = req.body;
    
    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    if (!request.studentId || !request.message || !request.knowledge) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'INVALID_REQUEST',
          message: 'studentId, message, and knowledge are required'
        }
      } as ApiResponse<never>);
    }

    const response = await aiService.processCompanionMode(request);
    
    res.json({
      success: true,
      data: response
    } as ApiResponse<AIResponse>);

  } catch (error) {
    logger.error('Error in companion endpoint:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'INTERNAL_SERVER_ERROR',
        message: 'Failed to process companion request'
      }
    } as ApiResponse<never>);
  }
});

/**
 * „Çª„ÉÉ„Ç∑„Éß„É≥ÊÉÖÂ†±ÂèñÂæó
 * GET /api/ai/session/:sessionId
 */
router.get('/session/:sessionId', async (req: Request, res: Response) => {
  try {
    const { sessionId } = req.params;
    
    const session = aiService.getSession(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        error: {
          code: 'SESSION_NOT_FOUND',
          message: 'Session not found'
        }
      } as ApiResponse<never>);
    }

    const messages = aiService.getMessages(sessionId);
    
    res.json({
      success: true,
      data: {
        session,
        messages
      }
    } as ApiResponse<{session: any, messages: any[]}>);

  } catch (error) {
    logger.error('Error in session endpoint:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'INTERNAL_SERVER_ERROR',
        message: 'Failed to get session'
      }
    } as ApiResponse<never>);
  }
});

/**
 * ÈÄ≤ÊçóÊõ¥Êñ∞Ôºà‰º¥Ëµ∞„É¢„Éº„ÉâÁî®Ôºâ
 * POST /api/ai/progress
 */
router.post('/progress', async (req: Request, res: Response) => {
  try {
    const { studentId, materialName, completedAmount, knowledge } = req.body;
    
    // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
    if (!studentId || !materialName || completedAmount === undefined || !knowledge) {
      return res.status(400).json({
        success: false,
        error: {
          code: 'INVALID_REQUEST',
          message: 'studentId, materialName, completedAmount, and knowledge are required'
        }
      } as ApiResponse<never>);
    }

    // ÈÄ≤Êçó„ÇíÊõ¥Êñ∞
    const updatedKnowledge = { ...knowledge };
    const material = updatedKnowledge.materials.find((m: any) => m.name === materialName);
    if (material) {
      material.current_progress = completedAmount;
    }

    // „Çπ„Éà„É™„Éº„ÇØÊó•Êï∞„ÅÆÊõ¥Êñ∞ÔºàÂÖ®„Å¶„ÅÆ„Çø„Çπ„ÇØ„ÅåÂÆå‰∫Ü„Åó„ÅüÂ†¥ÂêàÔºâ
    const allCompleted = updatedKnowledge.materials.every((m: any) => {
      const today = new Date();
      const deadline = new Date(updatedKnowledge.user_profile.goal.deadline);
      const remainingDays = Math.ceil((deadline.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
      const remaining = m.total_amount - m.current_progress;
      const dailyAmount = Math.ceil(remaining / remainingDays);
      return remaining <= dailyAmount;
    });

    if (allCompleted) {
      if (!updatedKnowledge.session_data) {
        updatedKnowledge.session_data = { streak_days: 0 };
      }
      updatedKnowledge.session_data.streak_days += 1;
    }

    res.json({
      success: true,
      data: {
        knowledge: updatedKnowledge,
        message: allCompleted 
          ? `Á¥†Êô¥„Çâ„Åó„ÅÑÔºÅ„ÅäÁñ≤„ÇåÊßò„Åß„Åó„ÅüÔºÅ‰ªäÊó•„ÅÆÂä™Âäõ„Çí„Åó„Å£„Åã„ÇäË®òÈå≤„Åó„Å¶„Åä„Åç„Åæ„Åô„Å≠„ÄÇÈÄ£Á∂öÂ≠¶Áøí${updatedKnowledge.session_data?.streak_days}Êó•ÁõÆÈÅîÊàê„Åß„ÅôÔºÅüéâ`
          : `${materialName}„ÅÆÈÄ≤Êçó„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇ„Åì„ÅÆË™øÂ≠ê„ÅßÈ†ëÂºµ„Çä„Åæ„Åó„Çá„ÅÜÔºÅ`
      }
    } as ApiResponse<{knowledge: any, message: string}>);

  } catch (error) {
    logger.error('Error in progress endpoint:', error);
    res.status(500).json({
      success: false,
      error: {
        code: 'INTERNAL_SERVER_ERROR',
        message: 'Failed to update progress'
      }
    } as ApiResponse<never>);
  }
});

export { router as aiRoutes };