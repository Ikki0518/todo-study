import { useState } from 'react';
import { SunaLogo } from './SunaLogo';
import { auth } from '../services/supabase';
import { userIdGenerator } from '../services/userIdGenerator';

// CookieÁÆ°ÁêÜ„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
const cookieUtils = {
  setCookie: (name, value, days = 7) => {
    const expires = new Date();
    expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
    document.cookie = `${name}=${encodeURIComponent(value)};expires=${expires.toUTCString()};path=/;SameSite=Lax`;
  },
  
  getCookie: (name) => {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for(let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));
    }
    return null;
  },
  
  deleteCookie: (name) => {
    document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;`;
  }
};

// Ë™çË®º„Éá„Éº„Çø„ÅÆÂÆâÂÖ®„Å™‰øùÂ≠òÔºàË§áÊï∞ÊñπÂºè‰ΩµÁî®Ôºâ
const secureAuthStore = {
  save: (userData, token) => {
    try {
      const authData = {
        user: userData,
        token: token,
        timestamp: Date.now(),
        expires: Date.now() + (7 * 24 * 60 * 60 * 1000) // 7Êó•ÈñìÊúâÂäπ
      };
      
      const userDataString = JSON.stringify(userData);
      
      // ÊñπÂºè1: localStorage („É°„Ç§„É≥)
      localStorage.setItem('currentUser', userDataString);
      localStorage.setItem('authToken', token);
      localStorage.setItem('auth_data', JSON.stringify(authData));
      
      // ÊñπÂºè2: sessionStorage („Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó1)
      sessionStorage.setItem('currentUser', userDataString);
      sessionStorage.setItem('authToken', token);
      sessionStorage.setItem('auth_data', JSON.stringify(authData));
      
      // ÊñπÂºè3: Cookie („Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó2 - ÊúÄ„ÇÇÊ∞∏Á∂öÁöÑ)
      cookieUtils.setCookie('auth_user', userDataString, 7);
      cookieUtils.setCookie('auth_token', token, 7);
      cookieUtils.setCookie('auth_backup', JSON.stringify(authData), 7);
      
      // ÊñπÂºè4: Â∞ÇÁî®„Ç≠„Éº („Éê„ÉÉ„ÇØ„Ç¢„ÉÉ„Éó3)
      if (userData.userId) {
        localStorage.setItem(`user_${userData.userId}`, JSON.stringify(authData));
        cookieUtils.setCookie(`session_${userData.userId}`, JSON.stringify(authData), 7);
      }
      
      console.log('üîí Ë™çË®º„Éá„Éº„Çø„ÇíË§áÊï∞ÊñπÂºè„Åß‰øùÂ≠òÂÆå‰∫Ü');
      console.log('  - localStorage‰øùÂ≠ò:', !!localStorage.getItem('currentUser'));
      console.log('  - sessionStorage‰øùÂ≠ò:', !!sessionStorage.getItem('currentUser'));
      console.log('  - Cookie‰øùÂ≠ò:', !!cookieUtils.getCookie('auth_user'));
      
      return true;
    } catch (error) {
      console.error('üö® Ë™çË®º„Éá„Éº„Çø‰øùÂ≠ò„Ç®„É©„Éº:', error);
      return false;
    }
  },
  
  clear: () => {
    // localStorage
    localStorage.removeItem('currentUser');
    localStorage.removeItem('authToken');
    localStorage.removeItem('auth_data');
    
    // sessionStorage
    sessionStorage.removeItem('currentUser');
    sessionStorage.removeItem('authToken');
    sessionStorage.removeItem('auth_data');
    
    // Cookie
    cookieUtils.deleteCookie('auth_user');
    cookieUtils.deleteCookie('auth_token');
    cookieUtils.deleteCookie('auth_backup');
    
    console.log('üßπ Ë™çË®º„Éá„Éº„Çø„ÇíÂÖ®ÊñπÂºè„Åß„ÇØ„É™„Ç¢ÂÆå‰∫Ü');
  }
};

export const LoginScreen = ({ onLogin, onRoleChange, onSignupClick }) => {
  const [formData, setFormData] = useState({
    loginField: '',
    password: ''
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    // „Ç®„É©„Éº„Çí„ÇØ„É™„Ç¢
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.loginField) {
      newErrors.loginField = '„É¶„Éº„Ç∂„ÉºID„Åæ„Åü„ÅØ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
    }

    if (!formData.password) {
      newErrors.password = '„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsLoading(true);
    setErrors({});

    try {
      console.log('üîê „É≠„Ç∞„Ç§„É≥ÈñãÂßã:', formData.loginField);
      console.log('üåç Áí∞Â¢É:', import.meta.env.MODE);
      console.log('üîó Supabase URL:', import.meta.env.VITE_SUPABASE_URL);
      console.log('üîë Supabase KeyÂ≠òÂú®:', !!import.meta.env.VITE_SUPABASE_ANON_KEY);
      
      // ÂÖ•ÂäõÂÄ§„Åå„É¶„Éº„Ç∂„ÉºID„Åã„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åã„ÇíËá™ÂãïÂà§ÂÆö
      const isUserId = userIdGenerator.validateUserIdFormat(formData.loginField);
      const isEmail = /\S+@\S+\.\S+/.test(formData.loginField);
      
      console.log('üìß „É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÂà§ÂÆö:', isEmail);
      console.log('üÜî „É¶„Éº„Ç∂„ÉºIDÂà§ÂÆö:', isUserId);
      
      let response;
      
      if (isUserId) {
        // „É¶„Éº„Ç∂„ÉºID„Åß„É≠„Ç∞„Ç§„É≥
        try {
          response = await auth.signInWithUserId(formData.loginField, formData.password);
        } catch (error) {
          console.error('„É¶„Éº„Ç∂„ÉºID„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº:', error);
          response = { success: false, error: error.message };
        }
        
        // API„É≠„Ç∞„Ç§„É≥Â§±ÊïóÊôÇ„ÅØ„É≠„Éº„Ç´„É´„ÉÜ„Çπ„Éà„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÁ¢∫Ë™ç
        if (!response.success) {
          if (formData.loginField === 'PM-0001' && formData.password === 'password') {
            const userData = {
              id: 'student-pm-0001',
              userId: 'PM-0001',
              email: 'pm0001@test.com',
              name: 'Â≠¶ÁøíËÄÖPM-0001',
              userRole: 'STUDENT',
              avatar_url: null,
              phoneNumber: '090-0001-0001',
              tenantCode: 'test'
            };
            
            // Â§öÂ±§Ë™çË®º„Ç∑„Çπ„ÉÜ„É†‰ΩøÁî®ÔºàlocalStorage„ÄÅsessionStorage„ÄÅCookieÔºâ
            const authToken = 'local-token-pm-0001';
            const saveSuccess = secureAuthStore.save(userData, authToken);
            
            if (saveSuccess) {
              console.log('‚úÖ PM-0001Â§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÊàêÂäü');
            } else {
              console.error('‚ùå PM-0001Â§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó');
            }
            
            console.log('„É≠„Éº„Ç´„É´PM-0001„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
            onRoleChange('STUDENT');
            setTimeout(() => {
              onLogin(true);
            }, 100);
            return;
          }
          
          // TC-0001: ikki_y0518@icloud.com „ÅÆÊïôÂ∏´Ê®©Èôê„É≠„Ç∞„Ç§„É≥
          if (formData.loginField === 'TC-0001' && formData.password === 'ikki0518') {
            const userData = {
              id: 'teacher-ikki-001',
              userId: 'TC-0001',
              email: 'ikki_y0518@icloud.com',
              name: 'Ikki Yamamoto (ÊïôÂ∏´)',
              userRole: 'INSTRUCTOR',
              avatar_url: null,
              phoneNumber: '090-0518-0518',
              tenantCode: 'TC',
              subscriptionActive: true,
              paymentStatus: 'completed'
            };
            
            const authToken = 'local-token-ikki-teacher';
            const saveSuccess = secureAuthStore.save(userData, authToken);
            
            if (saveSuccess) {
              console.log('‚úÖ IkkiÊïôÂ∏´„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÊàêÂäü');
            } else {
              console.error('‚ùå IkkiÊïôÂ∏´„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó');
            }
            
            console.log('IkkiÊïôÂ∏´„Ç¢„Ç´„Ç¶„É≥„Éà„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
            onRoleChange('INSTRUCTOR');
            setTimeout(() => {
              onLogin(true);
            }, 100);
            return;
          }
          
          // TC-0002: minnanoakogare777@gmail.com „ÅÆÊïôÂ∏´Ê®©Èôê„É≠„Ç∞„Ç§„É≥
          if (formData.loginField === 'TC-0002' && formData.password === 'minna777') {
            const userData = {
              id: 'teacher-minna-001',
              userId: 'TC-0002',
              email: 'minnanoakogare777@gmail.com',
              name: 'Minna Teacher',
              userRole: 'INSTRUCTOR',
              avatar_url: null,
              phoneNumber: '090-7777-7777',
              tenantCode: 'TC',
              subscriptionActive: true,
              paymentStatus: 'completed'
            };
            
            const authToken = 'local-token-minna-teacher';
            const saveSuccess = secureAuthStore.save(userData, authToken);
            
            if (saveSuccess) {
              console.log('‚úÖ MinnaÊïôÂ∏´„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÊàêÂäü');
            } else {
              console.error('‚ùå MinnaÊïôÂ∏´„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó');
            }
            
            console.log('MinnaÊïôÂ∏´„Ç¢„Ç´„Ç¶„É≥„Éà„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
            onRoleChange('INSTRUCTOR');
            setTimeout(() => {
              onLogin(true);
            }, 100);
            return;
          }
          
          // TC-0003: shishanxintai20@gmail.com „ÅÆÊïôÂ∏´Ê®©Èôê„É≠„Ç∞„Ç§„É≥
          if (formData.loginField === 'TC-0003' && formData.password === 'shishan20') {
            const userData = {
              id: 'teacher-shishan-001',
              userId: 'TC-0003',
              email: 'shishanxintai20@gmail.com',
              name: 'Shishan Teacher',
              userRole: 'INSTRUCTOR',
              avatar_url: null,
              phoneNumber: '090-2020-2020',
              tenantCode: 'TC',
              subscriptionActive: true,
              paymentStatus: 'completed'
            };
            
            const authToken = 'local-token-shishan-teacher';
            const saveSuccess = secureAuthStore.save(userData, authToken);
            
            if (saveSuccess) {
              console.log('‚úÖ ShishanÊïôÂ∏´„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÊàêÂäü');
            } else {
              console.error('‚ùå ShishanÊïôÂ∏´„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó');
            }
            
            console.log('ShishanÊïôÂ∏´„Ç¢„Ç´„Ç¶„É≥„Éà„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
            onRoleChange('INSTRUCTOR');
            setTimeout(() => {
              onLogin(true);
            }, 100);
            return;
          }
        }
      } else if (isEmail) {
        // „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åß„É≠„Ç∞„Ç§„É≥ÔºàÂæìÊù•„Ç∑„Çπ„ÉÜ„É† + „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºâ
        console.log('üìß „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„É≠„Ç∞„Ç§„É≥ÈñãÂßã');
        try {
          console.log('üîó SupabaseË™çË®º„ÇíË©¶Ë°å‰∏≠...');
          response = await auth.signIn(formData.loginField, formData.password);
          console.log('üîó SupabaseË™çË®ºÁµêÊûú:', response);
          
          if (!response.success) {
            // SupabaseË™çË®º„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„ÄÅ„É≠„Éº„Ç´„É´„ÉÜ„Çπ„Éà„Ç¢„Ç´„Ç¶„É≥„Éà„ÇíÁ¢∫Ë™ç
            console.log('‚ö†Ô∏è SupabaseË™çË®ºÂ§±Êïó„ÄÅ„É≠„Éº„Ç´„É´„ÉÜ„Çπ„Éà„Ç¢„Ç´„Ç¶„É≥„Éà„Åß„ÅÆË™çË®º„ÇíË©¶Ë°å');
            
            // „ÉÜ„Çπ„ÉàÁî®Ë¨õÂ∏´„Ç¢„Ç´„Ç¶„É≥„Éà
            if (formData.loginField === 'instructor@test.com' && formData.password === 'password123') {
              const userData = {
                id: 'instructor-test-1',
                email: 'instructor@test.com',
                name: 'Ë¨õÂ∏´„ÉÜ„Çπ„Éà',
                userRole: 'INSTRUCTOR',
                avatar_url: null,
                phoneNumber: '090-1111-2222'
              };
              localStorage.setItem('currentUser', JSON.stringify(userData));
              
              console.log('„É≠„Éº„Ç´„É´Ë¨õÂ∏´„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
              onRoleChange('INSTRUCTOR');
              setTimeout(() => {
                onLogin(true);
              }, 100);
              return;
            }
            
            // „ÉÜ„Çπ„ÉàÁî®ÁîüÂæí„Ç¢„Ç´„Ç¶„É≥„Éà
            if (formData.loginField === 'student@test.com' && formData.password === 'password123') {
              const userData = {
                id: 'student-test-1',
                email: 'student@test.com',
                name: 'ÁîüÂæí„ÉÜ„Çπ„Éà',
                userRole: 'STUDENT',
                avatar_url: null,
                phoneNumber: '090-2222-3333'
              };
              localStorage.setItem('currentUser', JSON.stringify(userData));
              
              console.log('„É≠„Éº„Ç´„É´ÁîüÂæí„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
              onRoleChange('STUDENT');
              setTimeout(() => {
                onLogin(true);
              }, 100);
              return;
            }
            
            // ÁâπÂÆö„É¶„Éº„Ç∂„Éº„ÅÆÂ≠¶ÁîüÊ®©Èôê„É≠„Ç∞„Ç§„É≥Ôºà„É°„Éº„É´„Ç¢„Éâ„É¨„ÇπÔºâ
            if (formData.loginField === 'ikki_y0518@icloud.com' && formData.password === 'ikki0518') {
              const userData = {
                id: 'student-ikki-001',
                email: 'ikki_y0518@icloud.com',
                name: 'Ikki Yamamoto (Â≠¶Áîü)',
                userRole: 'STUDENT',
                avatar_url: null,
                phoneNumber: '090-0518-0518',
                subscriptionActive: true,
                paymentStatus: 'completed'
              };
              
              // Â§öÂ±§Ë™çË®º„Ç∑„Çπ„ÉÜ„É†‰ΩøÁî®ÔºàlocalStorage„ÄÅsessionStorage„ÄÅCookieÔºâ
              const authToken = 'local-token-ikki-student';
              const saveSuccess = secureAuthStore.save(userData, authToken);
              
              if (saveSuccess) {
                console.log('‚úÖ IkkiÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÊàêÂäü');
              } else {
                console.error('‚ùå IkkiÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó');
              }
              
              console.log('IkkiÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„Éà„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
              onRoleChange('STUDENT');
              setTimeout(() => {
                onLogin(true);
              }, 100);
              return;
            }
            
            // minnanoakogare777@gmail.com „ÅÆÂ≠¶ÁîüÊ®©Èôê„É≠„Ç∞„Ç§„É≥
            if (formData.loginField === 'minnanoakogare777@gmail.com' && formData.password === 'minna777') {
              const userData = {
                id: 'student-minna-001',
                email: 'minnanoakogare777@gmail.com',
                name: 'Minna Student',
                userRole: 'STUDENT',
                avatar_url: null,
                phoneNumber: '090-7777-7777',
                subscriptionActive: true,
                paymentStatus: 'completed'
              };
              
              const authToken = 'local-token-minna-student';
              const saveSuccess = secureAuthStore.save(userData, authToken);
              
              if (saveSuccess) {
                console.log('‚úÖ MinnaÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÊàêÂäü');
              } else {
                console.error('‚ùå MinnaÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó');
              }
              
              console.log('MinnaÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„Éà„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
              onRoleChange('STUDENT');
              setTimeout(() => {
                onLogin(true);
              }, 100);
              return;
            }
            
            // shishanxintai20@gmail.com „ÅÆÂ≠¶ÁîüÊ®©Èôê„É≠„Ç∞„Ç§„É≥
            if (formData.loginField === 'shishanxintai20@gmail.com' && formData.password === 'shishan20') {
              const userData = {
                id: 'student-shishan-001',
                email: 'shishanxintai20@gmail.com',
                name: 'Shishan Student',
                userRole: 'STUDENT',
                avatar_url: null,
                phoneNumber: '090-2020-2020',
                subscriptionActive: true,
                paymentStatus: 'completed'
              };
              
              const authToken = 'local-token-shishan-student';
              const saveSuccess = secureAuthStore.save(userData, authToken);
              
              if (saveSuccess) {
                console.log('‚úÖ ShishanÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÊàêÂäü');
              } else {
                console.error('‚ùå ShishanÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„ÉàÂ§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó');
              }
              
              console.log('ShishanÂ≠¶Áîü„Ç¢„Ç´„Ç¶„É≥„Éà„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
              onRoleChange('STUDENT');
              setTimeout(() => {
                onLogin(true);
              }, 100);
              return;
            }
          }
        } catch (error) {
          console.error('„É°„Éº„É´Ë™çË®º„Ç®„É©„Éº:', error);
          response = { success: false, error: error.message || '„É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü' };
        }
      } else if (isUserId || formData.loginField === 'PM-0001' || formData.loginField === 'TC-0001') {
        // „É¶„Éº„Ç∂„ÉºID„Åß„ÅÆ„É≠„Éº„Ç´„É´„ÉÜ„Çπ„Éà„Ç¢„Ç´„Ç¶„É≥„ÉàÁ¢∫Ë™çÔºàÁõ¥Êé•Âà§ÂÆö„ÇÇÂê´„ÇÄÔºâ
        console.log('üîç „É≠„Éº„Ç´„É´„ÉÜ„Çπ„Éà„Ç¢„Ç´„Ç¶„É≥„Éà„Éñ„É≠„ÉÉ„ÇØÂÆüË°å:', {
          isUserId: isUserId,
          loginField: formData.loginField,
          Êù°‰ª∂Âà§ÂÆö: formData.loginField === 'PM-0001' || formData.loginField === 'TC-0001'
        });
        
        if (formData.loginField === 'PM-0001' && formData.password === 'password') {
          console.log('üéØ PM-0001Âá¶ÁêÜ„Éñ„É≠„ÉÉ„ÇØÈñãÂßã!');
          const userData = {
            id: 'student-pm-0001',
            userId: 'PM-0001',
            email: 'pm0001@test.com',
            name: 'Â≠¶ÁøíËÄÖPM-0001',
            userRole: 'STUDENT',
            avatar_url: null,
            phoneNumber: '090-0001-0001',
            tenantCode: 'test'
          };
          
          // Â§öÂ±§Ë™çË®º„Ç∑„Çπ„ÉÜ„É†‰ΩøÁî®ÔºàlocalStorage„ÄÅsessionStorage„ÄÅCookieÔºâ
          const authToken = 'local-token-pm-0001';
          const saveSuccess = secureAuthStore.save(userData, authToken);
          
          if (saveSuccess) {
            console.log('‚úÖ PM-0001Â§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÊàêÂäü');
          } else {
            console.error('‚ùå PM-0001Â§öÂ±§Ë™çË®º„Éá„Éº„Çø‰øùÂ≠òÂ§±Êïó');
          }
          
          console.log('„É≠„Éº„Ç´„É´PM-0001„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
          onRoleChange('STUDENT');
          setTimeout(() => {
            onLogin(true);
          }, 100);
          return;
        }
        
        if (formData.loginField === 'TC-0001' && formData.password === 'password') {
          const userData = {
            id: 'instructor-tc-0001',
            userId: 'TC-0001',
            email: 'tc0001@test.com',
            name: 'Ë¨õÂ∏´TC-0001',
            userRole: 'INSTRUCTOR',
            avatar_url: null,
            phoneNumber: '090-0001-0002',
            tenantCode: 'test'
          };
          secureAuthStore.save(userData, response.data.token || 'api-token');
          localStorage.setItem('authToken', 'local-token-tc-0001');
          
          console.log('„É≠„Éº„Ç´„É´TC-0001„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', userData);
          onRoleChange('INSTRUCTOR');
          setTimeout(() => {
            onLogin(true);
          }, 100);
          return;
        }
      } else {
        // ÁÑ°Âäπ„Å™ÂΩ¢Âºè
        setErrors({ general: '„É¶„Éº„Ç∂„ÉºID„Åæ„Åü„ÅØ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„ÅÆÂΩ¢Âºè„ÅåÊ≠£„Åó„Åè„ÅÇ„Çä„Åæ„Åõ„Çì' });
        return;
      }

      if (response.success) {
        const user = response.data.user;
        console.log('„É≠„Ç∞„Ç§„É≥ÊàêÂäü:', user);
        
        // „É≠„Éº„É´Âà§ÂÆöÔºàÊñ∞„Ç∑„Çπ„ÉÜ„É†„ÅÆÂ†¥ÂêàÔºâ
        let userRole = user.role;
        if (user.userId && !userRole) {
          userRole = userIdGenerator.getRoleFromUserId(user.userId);
        }
        
        // instructor@test.com„ÅÆÂ†¥Âêà„ÅØÂº∑Âà∂ÁöÑ„Å´INSTRUCTOR„É≠„Éº„É´„ÇíË®≠ÂÆöÔºàÂæìÊù•„Ç∑„Çπ„ÉÜ„É†‰∫íÊèõÔºâ
        if (user.email === 'instructor@test.com') {
          userRole = 'INSTRUCTOR';
          console.log('instructor@test.com„Åß„É≠„Ç∞„Ç§„É≥ - INSTRUCTOR„É≠„Éº„É´„ÇíÂº∑Âà∂Ë®≠ÂÆö');
        } else if (!userRole) {
          userRole = 'STUDENT';
          console.log('„É≠„Éº„É´ÊÉÖÂ†±„ÅåÂèñÂæó„Åß„Åç„Å™„ÅÑ„Åü„ÇÅ„ÄÅSTUDENT„É≠„Éº„É´„ÇíË®≠ÂÆö');
        }
        
        const userData = {
          id: user.id,
          userId: user.userId,
          email: user.email,
          name: user.name || '„É¶„Éº„Ç∂„Éº',
          userRole: userRole,
          tenantCode: user.tenantCode,
          avatar_url: user.avatar_url,
          phoneNumber: user.phoneNumber
        };
        localStorage.setItem('currentUser', JSON.stringify(userData));
        
        console.log('„É≠„Ç∞„Ç§„É≥ÂÆå‰∫Ü - „É≠„Éº„É´:', userRole);
        onRoleChange(userRole);
        setTimeout(() => {
          onLogin(true);
        }, 100);
      } else {
        let errorMessage = '„É≠„Ç∞„Ç§„É≥„Å´Â§±Êïó„Åó„Åæ„Åó„Åü';
        
        if (response.error) {
          if (typeof response.error === 'string') {
            errorMessage = response.error;
          } else if (typeof response.error === 'object' && response.error.message) {
            errorMessage = response.error.message;
          } else if (typeof response.error === 'object') {
            try {
              errorMessage = JSON.stringify(response.error);
            } catch (e) {
              errorMessage = '„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
            }
          }
        }
        
        setErrors({ general: errorMessage });
      }
    } catch (error) {
      console.error('„É≠„Ç∞„Ç§„É≥„Ç®„É©„Éº:', error);
      let errorMessage = '„É≠„Ç∞„Ç§„É≥Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
      
      if (error && typeof error === 'object') {
        if (error.message && typeof error.message === 'string') {
          errorMessage = error.message;
        } else if (error.toString && typeof error.toString === 'function') {
          try {
            errorMessage = error.toString();
          } catch (e) {
            // toString()„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ„Éá„Éï„Ç©„É´„Éà„É°„ÉÉ„Çª„Éº„Ç∏„Çí‰ΩøÁî®
          }
        }
      } else if (typeof error === 'string') {
        errorMessage = error;
      }
      
      setErrors({ general: errorMessage });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4">
      <div className="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md">
        <div className="text-center mb-8">
          <div className="mb-4 flex justify-center">
            <SunaLogo width={90} height={45} />
          </div>
          <p className="text-gray-600 mt-2">„Ç¢„Ç´„Ç¶„É≥„Éà„Å´„É≠„Ç∞„Ç§„É≥</p>
        </div>

        <div className="text-center mb-6">
          <h2 className="text-xl font-semibold text-gray-800">„É≠„Ç∞„Ç§„É≥</h2>
          <p className="text-sm text-gray-600 mt-1">„É¶„Éº„Ç∂„ÉºID„Åæ„Åü„ÅØ„É°„Éº„É´„Ç¢„Éâ„É¨„Çπ„Åß„É≠„Ç∞„Ç§„É≥</p>
        </div>


        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              „É¶„Éº„Ç∂„ÉºID „Åæ„Åü„ÅØ „É°„Éº„É´„Ç¢„Éâ„É¨„Çπ <span className="text-red-500">*</span>
            </label>
            <input
              type="text"
              name="loginField"
              value={formData.loginField}
              onChange={handleInputChange}
              placeholder="PM-0001 „Åæ„Åü„ÅØ example@email.com"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            {errors.loginField && <p className="text-red-500 text-sm mt-1">{errors.loginField}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              „Éë„Çπ„ÉØ„Éº„Éâ <span className="text-red-500">*</span>
            </label>
            <input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
              placeholder="„Éë„Çπ„ÉØ„Éº„Éâ„ÇíÂÖ•Âäõ"
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            {errors.password && <p className="text-red-500 text-sm mt-1">{errors.password}</p>}
          </div>

          {errors.general && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-3">
              <p className="text-red-600 text-sm">{errors.general}</p>
            </div>
          )}

          <button
            type="submit"
            disabled={isLoading}
            className="w-full bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            {isLoading ? 'Âá¶ÁêÜ‰∏≠...' : '„É≠„Ç∞„Ç§„É≥'}
          </button>
        </form>

        <div className="mt-6 text-center">
          <p className="text-sm text-gray-600 mb-4">
            „Ç¢„Ç´„Ç¶„É≥„Éà„Çí„ÅäÊåÅ„Å°„Åß„Å™„ÅÑÊñπ
          </p>
          <button
            onClick={onSignupClick}
            className="text-blue-600 hover:text-blue-700 font-medium text-sm"
          >
            Êñ∞Ë¶èÁôªÈå≤„ÅØ„Åì„Å°„Çâ
          </button>
        </div>

        <div className="mt-6 text-center">
          <p className="text-sm text-gray-500">Supabase„ÅßÂÆâÂÖ®„Å´ÁÆ°ÁêÜ</p>
        </div>
      </div>
    </div>
  );
};