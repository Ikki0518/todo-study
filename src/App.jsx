import { useState, useEffect } from 'react'
import { SunaLogo } from './components/SunaLogo';
import { PersonalizeMode } from './components/PersonalizeMode';
import { CompanionMode } from './components/CompanionMode';
import { LoginScreen } from './components/LoginScreen';
import { PricingPage } from './components/PricingPage';
import { RegistrationFlow } from './components/RegistrationFlow';
import InstructorDashboard from './components/InstructorView';
import { MonthlyCalendar } from './components/MonthlyCalendar';
import { StudyBookManager } from './components/StudyBookManager';
import { DailyTaskPool } from './components/DailyTaskPool';
import { CalendarWithSchedule } from './components/CalendarWithSchedule';
import { getEventCoordinates, startDrag } from './utils/dragUtils';
import { ProfileSettings } from './components/ProfileSettings';
import { InviteManager } from './components/InviteManager';
import StudentMessages from './components/StudentMessages';
import InstructorMessages from './components/InstructorMessages';
import FloatingActionButton from './components/FloatingActionButton';
import { MobileTaskPopup } from './components/MobileTaskPopup';
import { ExamDateSettings } from './components/ExamDateSettings';
import { MobileWeeklyPlannerDemo } from './components/MobileWeeklyPlannerDemo';
import TaskPoolManager from './components/TaskPoolManager';
import { generateStudyPlan, convertPlansToTasks, calculateStudyPlanStats } from './utils/studyPlanGenerator';
import apiService from './services/apiService';
import sessionService from './services/sessionService';

function App() {
  // CookieÁÆ°ÁêÜ„É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£ÔºàApp.jsxÁî®Ôºâ
  const cookieUtils = {
    getCookie: (name) => {
      const nameEQ = name + "=";
      const ca = document.cookie.split(';');
      for(let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return decodeURIComponent(c.substring(nameEQ.length, c.length));
      }
      return null;
    }
  };

  // Ë™çË®ºÁä∂ÊÖã„ÅÆÂàùÊúüÂåñ„ÇíÂêåÊúüÁöÑ„Å´Ë°å„ÅÜÔºà„Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„ÇπÁµ±ÂêàÁâàÔºâ
  const initializeAuthSync = () => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üîç ===== ÂêåÊúüË™çË®ºÂàùÊúüÂåñÈñãÂßã =====');
      console.log('üç™ CookieÂæ©ÂÖÉÂá¶ÁêÜÈñãÂßã');
      console.log('  - Âà©Áî®ÂèØËÉΩCookie:', document.cookie);
    }
    
    // „Éá„É¢„É¢„Éº„ÉâÁî®„ÅÆ‰∏ÄÊôÇÁöÑ„Å™Ë®≠ÂÆö
    if (window.location.search.includes('demo=true')) {
      return {
        isAuthenticated: true,
        currentUser: {
          id: 'PM-0001',
          name: 'Â±±Áî∞Â§™ÈÉé',
          role: 'STUDENT',
          email: 'demo@example.com'
        },
        authToken: 'demo-token'
      };
    }
    
    // „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„Åã„ÇâÁä∂ÊÖã„ÇíÂæ©ÂÖÉ
    const restoredSession = sessionService.restoreSession();
    if (restoredSession) {
      console.log('‚úÖ „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„Åã„ÇâÁä∂ÊÖãÂæ©ÂÖÉ:', restoredSession);
      
      // „Çª„ÉÉ„Ç∑„Éß„É≥„Åã„ÇâË™çË®ºÁä∂ÊÖã„ÇíÂæ©ÂÖÉ„Åß„Åç„ÇãÂ†¥Âêà
      if (restoredSession.authState && restoredSession.authState.isLoggedIn) {
        return {
          isLoggedIn: restoredSession.authState.isLoggedIn,
          userRole: restoredSession.authState.userRole,
          currentUser: restoredSession.authState.currentUser,
          currentView: restoredSession.currentView || 'goals'
        };
      }
    }
    
    let authToken = localStorage.getItem('authToken');
    let savedUser = localStorage.getItem('currentUser');
    
    // localStorageÂ§±ÊïóÊôÇ„ÅÆ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºàÊÆµÈöéÁöÑ„ÉÅ„Çß„ÉÉ„ÇØÔºâ
    if (!authToken) {
      authToken = sessionStorage.getItem('authToken');
      if (authToken) console.log('‚úÖ sessionStorage„Åã„ÇâauthTokenÂæ©ÂÖÉ');
    }
    if (!authToken) {
      authToken = localStorage.getItem('backup_authToken');
      if (authToken) console.log('‚úÖ backup_authToken„Åã„ÇâÂæ©ÂÖÉ');
    }
    if (!authToken) {
      authToken = cookieUtils.getCookie('auth_token');
      if (authToken) console.log('‚úÖ Cookie„Åã„ÇâauthTokenÂæ©ÂÖÉ:', authToken);
    }
    
    if (!savedUser) {
      savedUser = sessionStorage.getItem('currentUser');
      if (savedUser) console.log('‚úÖ sessionStorage„Åã„ÇâcurrentUserÂæ©ÂÖÉ');
    }
    if (!savedUser) {
      savedUser = localStorage.getItem('backup_currentUser');
      if (savedUser) console.log('‚úÖ backup_currentUser„Åã„ÇâÂæ©ÂÖÉ');
    }
    if (!savedUser) {
      savedUser = cookieUtils.getCookie('auth_user');
      if (savedUser) console.log('‚úÖ Cookie„Åã„ÇâcurrentUserÂæ©ÂÖÉ:', savedUser);
    }
    
    // Âº∑Âåñ„Åï„Çå„Åü‰øùÂ≠ò„Ç≠„Éº„Åã„Çâ„ÇÇË©¶Ë°åÔºàCookieÂØæÂøúÁâàÔºâ
    const authDataSources = [
      'auth_data',
      'backup_auth_data',
      'pm_0001_session',
      'user_PM-0001',
      'last_login_user',
      'auth_backup',
      'session_PM-0001'
    ];
    
    // ËøΩÂä†„ÅÆ„ÇΩ„Éº„Çπ„Åã„ÇâË™çË®º„Éá„Éº„Çø„ÇíÂæ©ÂÖÉÔºàCookieÂØæÂøúÔºâ
    if (!authToken || !savedUser) {
      for (const source of authDataSources) {
        try {
          // localStorage, sessionStorage, Cookie„ÅÆÈ†Ü„ÅßË©¶Ë°å
          const storageData = localStorage.getItem(source)
            || sessionStorage.getItem(source)
            || cookieUtils.getCookie(source);
            
          if (storageData) {
            const parsed = JSON.parse(storageData);
            console.log(`üîç ${source}„Åã„ÇâË™çË®º„Éá„Éº„Çø„ÇíÁô∫Ë¶ã:`, parsed);
            
            if (parsed.token && !authToken) {
              authToken = parsed.token;
              console.log(`‚úÖ ${source}„Åã„ÇâauthTokenÂæ©ÂÖÉ:`, authToken);
            }
            
            if (parsed.user && !savedUser) {
              savedUser = JSON.stringify(parsed.user);
              console.log(`‚úÖ ${source}„Åã„ÇâsavedUserÂæ©ÂÖÉ:`, savedUser);
            }
            
            // Áõ¥Êé•„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅåÂÖ•„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà
            if (parsed.userId && !savedUser) {
              savedUser = JSON.stringify(parsed);
              console.log(`‚úÖ ${source}„Åã„ÇâÁõ¥Êé•„É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøÂæ©ÂÖÉ:`, savedUser);
            }
            
            if (authToken && savedUser) {
              console.log(`üéØ ${source}„Åã„ÇâÂÆåÂÖ®„Å™Ë™çË®º„Éá„Éº„Çø„ÇíÂæ©ÂÖÉ„Åó„Åæ„Åó„ÅüÔºÅ`);
              break;
            }
          }
        } catch (error) {
          console.warn(`‚ùå ${source}„ÅÆËß£Êûê„Ç®„É©„Éº:`, error);
        }
      }
    }
    
    console.log('üîç ÂêåÊúüË™çË®ºÂàùÊúüÂåñÁµêÊûú:', {
      authToken: authToken ? 'Â≠òÂú®' : '‰∏çÂ≠òÂú®',
      savedUser: savedUser ? 'Â≠òÂú®' : '‰∏çÂ≠òÂú®',
      authTokenValue: authToken,
      savedUserValue: savedUser ? savedUser.substring(0, 100) + '...' : null
    });
    
    // „Éá„Éê„ÉÉ„Ç∞: localStorage „ÅÆÂÜÖÂÆπ„ÇíË©≥Á¥∞„Å´Á¢∫Ë™ç
    console.log('üîç localStorageË©≥Á¥∞Á¢∫Ë™ç:');
    console.log('  - localStorage.getItem("authToken"):', localStorage.getItem('authToken'));
    console.log('  - localStorage.getItem("currentUser"):', localStorage.getItem('currentUser'));
    console.log('  - sessionStorage.getItem("authToken"):', sessionStorage.getItem('authToken'));
    console.log('  - sessionStorage.getItem("currentUser"):', sessionStorage.getItem('currentUser'));
    console.log('  - localStorage.getItem("pm_0001_session"):', localStorage.getItem('pm_0001_session'));
    console.log('  - localStorage.getItem("auth_data"):', localStorage.getItem('auth_data'));
    console.log('  - localStorage keys:', Object.keys(localStorage));
    
    if (authToken && savedUser) {
      try {
        const userData = JSON.parse(savedUser);
        console.log('‚úÖ ÂêåÊúüË™çË®ºÂæ©ÂÖÉÊàêÂäü:', userData);
        return {
          isLoggedIn: true,
          userRole: userData.userRole,
          currentUser: userData,
          currentView: userData.userRole === 'INSTRUCTOR' ? 'dashboard' : 'goals'
        };
      } catch (parseError) {
        console.error('üö® ÂêåÊúüË™çË®ºÂæ©ÂÖÉ„Ç®„É©„Éº:', parseError);
        // Á†¥Êêç„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢
        localStorage.removeItem('currentUser');
        localStorage.removeItem('authToken');
        return {
          isLoggedIn: false,
          userRole: null,
          currentUser: null,
          currentView: 'goals'
        };
      }
    }
    
    return {
      isLoggedIn: false,
      userRole: null,
      currentUser: null,
      currentView: 'goals'
    };
  };
  
  // ÂêåÊúüÁöÑ„Å´Ë™çË®ºÁä∂ÊÖã„ÇíÂàùÊúüÂåñÔºà„Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„ÇπÁµ±ÂêàÁâàÔºâ
  const initialAuthState = initializeAuthSync();
  
  // „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„Åã„ÇâËøΩÂä†„ÅÆÁä∂ÊÖã„ÇíÂæ©ÂÖÉ
  const restoreSessionState = () => {
    const restoredSession = sessionService.restoreSession();
    if (restoredSession) {
      console.log('üîÑ „Çª„ÉÉ„Ç∑„Éß„É≥„Åã„ÇâËøΩÂä†Áä∂ÊÖã„ÇíÂæ©ÂÖÉ:', restoredSession);
      
      return {
        currentView: restoredSession.currentView || initialAuthState.currentView || 'planner',
        isPaid: restoredSession.paymentState?.isPaid || false,
        paymentStatus: restoredSession.paymentState?.paymentStatus || null,
        selectedPlan: restoredSession.paymentState?.selectedPlan || null,
        showPricing: !restoredSession.authState?.isLoggedIn,
        showRegistrationFlow: false,
        showLoginScreen: false,
        isLoggedIn: restoredSession.authState?.isLoggedIn || initialAuthState.isLoggedIn,
        userRole: restoredSession.authState?.userRole || initialAuthState.userRole,
        currentUser: restoredSession.authState?.currentUser || initialAuthState.currentUser,
        hasValidSubscription: restoredSession.authState?.hasValidSubscription || initialAuthState.isLoggedIn
      };
    }
    
    return {
      currentView: initialAuthState.currentView || 'planner',
      isPaid: false,
      paymentStatus: null,
      selectedPlan: null,
      showPricing: !initialAuthState.isLoggedIn,
      showRegistrationFlow: false,
      showLoginScreen: false,
      isLoggedIn: initialAuthState.isLoggedIn,
      userRole: initialAuthState.userRole,
      currentUser: initialAuthState.currentUser,
      hasValidSubscription: initialAuthState.isLoggedIn
    };
  };
  
  const sessionState = restoreSessionState();
  
  const [currentView, setCurrentView] = useState('planner') // „Éá„É¢„É¢„Éº„ÉâÁî®„Å´Âõ∫ÂÆö
  const [currentStreak] = useState(15)
  
  // „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„Å®ÈÄ£Êê∫„Åó„Åü„Éì„É•„ÉºÊõ¥Êñ∞Èñ¢Êï∞
  const updateCurrentView = (newView) => {
    setCurrentView(newView);
    sessionService.updateCurrentView(newView);
    sessionService.updateSessionActivity();
  };
  
  // Ê±∫Ê∏àÁä∂ÊÖã„ÅÆÁÆ°ÁêÜÔºà„Çª„ÉÉ„Ç∑„Éß„É≥„Åã„ÇâÂæ©ÂÖÉÔºâ
  const [isPaid, setIsPaid] = useState(true) // „Éá„É¢„É¢„Éº„Éâ
  const [paymentStatus, setPaymentStatus] = useState('paid') // „Éá„É¢„É¢„Éº„Éâ
  const [selectedPlan, setSelectedPlan] = useState({ name: '„Éá„É¢„Éó„É©„É≥' }) // „Éá„É¢„É¢„Éº„Éâ
  const [showPricing, setShowPricing] = useState(false) // „Éá„É¢„É¢„Éº„Éâ
  const [showRegistrationFlow, setShowRegistrationFlow] = useState(false) // „Éá„É¢„É¢„Éº„Éâ
  const [showLoginScreen, setShowLoginScreen] = useState(false) // „Éá„É¢„É¢„Éº„Éâ
  
  // Ë™çË®ºÁä∂ÊÖã„ÇíÂàùÊúüÂåñÊôÇ„Å´Âæ©ÂÖÉÔºà„Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„ÇπÁµ±ÂêàÁâàÔºâ
  // „Éá„É¢„É¢„Éº„ÉâÁî®„ÅÆ‰∏ÄÊôÇÁöÑ„Å™Ë®≠ÂÆö
  const [isLoggedIn, setIsLoggedIn] = useState(true) // „Éá„É¢„É¢„Éº„Éâ
  const [authInitialized, setAuthInitialized] = useState(true)
  const [userRole, setUserRole] = useState('STUDENT') // „Éá„É¢„É¢„Éº„Éâ
  const [currentUser, setCurrentUser] = useState({
    id: 'PM-0001',
    name: 'Â±±Áî∞Â§™ÈÉé',
    role: 'STUDENT',
    email: 'demo@example.com'
  }) // „Éá„É¢„É¢„Éº„Éâ
  const [hasValidSubscription, setHasValidSubscription] = useState(true) // „Éá„É¢„É¢„Éº„Éâ
  const [goals, setGoals] = useState([
    {
      id: 'goal-1',
      title: 'Êï∞Â≠¶„ÅÆÂü∫Á§éÂäõÂêë‰∏ä',
      description: 'Âü∫Êú¨ÁöÑ„Å™Ë®àÁÆóÂïèÈ°å„ÇíÁ¢∫ÂÆü„Å´Ëß£„Åë„Çã„Çà„ÅÜ„Å´„Å™„Çã',
      priority: 'high',
      dueDate: '2025-01-20',
      userId: 'test-user-001'
    }
  ])
  const [todayTasks, setTodayTasks] = useState([
    {
      id: 'today-task-1',
      title: 'Áâ©ÁêÜ„ÅÆÂÆüÈ®ì„É¨„Éù„Éº„Éà',
      description: 'ÊåØ„ÇäÂ≠ê„ÅÆÂÆüÈ®ìÁµêÊûú„Çí„Åæ„Å®„ÇÅ„Çã',
      priority: 'high',
      subject: 'Áâ©ÁêÜ',
      dueDate: '2025-07-16',
      estimatedTime: 90,
      status: 'pending',
      createdAt: new Date().toISOString()
    },
    {
      id: 'today-task-2',
      title: 'ÂåñÂ≠¶„ÅÆ‰∫àÁøí',
      description: 'Ê¨°Âõû„ÅÆÊéàÊ•≠ÁØÑÂõ≤„ÇíË™≠„ÇÄ',
      priority: 'medium',
      subject: 'ÂåñÂ≠¶',
      dueDate: '2025-07-16',
      estimatedTime: 45,
      status: 'pending',
      createdAt: new Date().toISOString()
    }
  ])
  const [scheduledTasks, setScheduledTasks] = useState({
    '2025-07-14-10': {
      id: 'scheduled-task-1',
      title: 'Êï∞Â≠¶„ÅÆÂÆøÈ°å',
      description: 'ÊïôÁßëÊõ∏p.45-50„ÅÆÂïèÈ°å„ÇíËß£„Åè',
      priority: 'high',
      estimatedTime: 60,
      duration: 1,
      subject: 'Êï∞Â≠¶',
      startTime: '10:00',
      endTime: '11:00'
    },
    '2025-07-14-14': {
      id: 'scheduled-task-2',
      title: 'Ëã±Ë™û„ÅÆÂçòË™ûÊöóË®ò',
      description: 'ÂçòË™ûÂ∏≥„ÅÆ50-100Áï™„ÇíË¶ö„Åà„Çã',
      priority: 'medium',
      estimatedTime: 30,
      duration: 1,
      subject: 'Ëã±Ë™û',
      startTime: '14:00',
      endTime: '14:30'
    }
  })
  const [completedTasks, setCompletedTasks] = useState({})
  const [showGoalModal, setShowGoalModal] = useState(false)
  const [editingGoal, setEditingGoal] = useState(null)
  const [weekOffset, setWeekOffset] = useState(0)
  const [viewMode, setViewMode] = useState('week')
  const [overdueTasks, setOverdueTasks] = useState([])
  const [showMobileMenu, setShowMobileMenu] = useState(false)

  // Êñ∞Ê©üËÉΩ„ÅÆÁä∂ÊÖã
  const [studyBooks, setStudyBooks] = useState([])
  const [studyPlans, setStudyPlans] = useState({})
  const [selectedDate, setSelectedDate] = useState(new Date())
  const [dailyTaskPool, setDailyTaskPool] = useState([
    {
      id: 'task-1',
      title: 'Êï∞Â≠¶„ÅÆÂÆøÈ°å',
      description: 'ÊïôÁßëÊõ∏p.45-50„ÅÆÂïèÈ°å„ÇíËß£„Åè',
      priority: 'high',
      estimatedTime: 60,
      goalId: 'goal-1',
      subject: 'Êï∞Â≠¶',
      createdAt: new Date().toISOString()
    },
    {
      id: 'task-2',
      title: 'Ëã±Ë™û„ÅÆÂçòË™ûÊöóË®ò',
      description: 'ÂçòË™ûÂ∏≥„ÅÆ50-100Áï™„ÇíË¶ö„Åà„Çã',
      priority: 'medium',
      estimatedTime: 30,
      goalId: 'goal-1',
      subject: 'Ëã±Ë™û',
      createdAt: new Date().toISOString()
    },
    {
      id: 'task-3',
      title: 'ÁêÜÁßë„ÅÆ„É¨„Éù„Éº„Éà‰ΩúÊàê',
      description: 'ÂÆüÈ®ìÁµêÊûú„Çí„Åæ„Å®„ÇÅ„Çã',
      priority: 'low',
      estimatedTime: 90,
      goalId: 'goal-1',
      subject: 'ÁêÜÁßë',
      createdAt: new Date().toISOString()
    }
  ])
  const [allTasksHistory, setAllTasksHistory] = useState({})
  const [examDates, setExamDates] = useState([
    {
      id: Date.now(),
      title: 'Â§ßÂ≠¶ÂÖ•Ë©¶',
      date: '2025-12-31',
      createdAt: new Date().toISOString()
    }
  ])

  // AIÊ©üËÉΩ„ÅÆÁä∂ÊÖã
  const [currentAIMode, setCurrentAIMode] = useState('select');
  const [userKnowledge, setUserKnowledge] = useState(null);

  // „Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„ÅÆÁä∂ÊÖã
  const [currentTime, setCurrentTime] = useState(new Date())
  const [animatingTasks, setAnimatingTasks] = useState(new Set())
  const [draggingOverCalendar, setDraggingOverCalendar] = useState(false)
  const [currentDragTask, setCurrentDragTask] = useState(null)
  const [dragImageElement, setDragImageElement] = useState(null)
  const [draggingTaskId, setDraggingTaskId] = useState(null)
  const [isMobile, setIsMobile] = useState(window.innerWidth < 768)
  
  // „Çø„Çπ„ÇØÂâäÈô§Á¢∫Ë™ç„ÅÆÁä∂ÊÖã
  const [taskClickCount, setTaskClickCount] = useState({})
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(null)
  
  // „É¢„Éê„Ç§„É´Áî®„Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„ÅÆÁä∂ÊÖã
  const [showMobileTaskPopup, setShowMobileTaskPopup] = useState(false)
  const [selectedCellInfo, setSelectedCellInfo] = useState({ date: null, hour: null })
  
  // ÂèóÈ®ìÊó•„Åã„ÇâÊÆã„ÇäÊó•Êï∞„ÇíË®àÁÆó„Åô„ÇãÈñ¢Êï∞
  const calculateDaysRemaining = (targetDate) => {
    const today = new Date()
    const target = new Date(targetDate)
    today.setHours(0, 0, 0, 0)
    target.setHours(0, 0, 0, 0)
    const diffTime = target - today
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24))
    return diffDays
  }

  // ÊúÄ„ÇÇËøë„ÅÑÂèóÈ®ìÊó•„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  const getNextExam = () => {
    const futureExams = examDates.filter(exam => {
      const days = calculateDaysRemaining(exam.date)
      return days >= 0
    })
    
    if (futureExams.length === 0) return null
    
    return futureExams.reduce((nearest, current) => {
      const nearestDays = calculateDaysRemaining(nearest.date)
      const currentDays = calculateDaysRemaining(current.date)
      return currentDays < nearestDays ? current : nearest
    })
  }

  // ÂèóÈ®ìÊó•„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø
  useEffect(() => {
    const savedExamDates = localStorage.getItem('examDates')
    if (savedExamDates) {
      try {
        const parsedExamDates = JSON.parse(savedExamDates)
        setExamDates(parsedExamDates)
        console.log('‚úÖ ÂèóÈ®ìÊó•„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„Åø„Åæ„Åó„Åü:', parsedExamDates)
      } catch (error) {
        console.error('üö® ÂèóÈ®ìÊó•„Éá„Éº„Çø„ÅÆË™≠„ÅøËæº„Åø„Å´Â§±Êïó:', error)
      }
    }
  }, [])

  // Ê±∫Ê∏àÁä∂ÊÖã„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØÔºà„Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„ÇπÁµ±ÂêàÁâàÔºâ
  useEffect(() => {
    const checkPaymentStatus = () => {
      // „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„Åã„ÇâÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
      const restoredSession = sessionService.restoreSession()
      if (restoredSession && restoredSession.authState && restoredSession.authState.isLoggedIn) {
        console.log('‚úÖ „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„Åã„ÇâË™çË®ºÁä∂ÊÖã„ÇíÂæ©ÂÖÉ - Ê±∫Ê∏à„ÉÅ„Çß„ÉÉ„ÇØ„Çí„Çπ„Ç≠„ÉÉ„Éó')
        return // „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„ÅåÊúâÂäπ„Å™Â†¥Âêà„ÅØÂæìÊù•„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Çí„Çπ„Ç≠„ÉÉ„Éó
      }
      
      // URL„Éë„É©„É°„Éº„Çø„Åã„ÇâÊ±∫Ê∏àÊàêÂäü„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const urlParams = new URLSearchParams(window.location.search)
      const paymentSuccess = urlParams.get('payment_success')
      const sessionId = urlParams.get('session_id')
      const userId = urlParams.get('user_id')
      
      // localStorage„Åã„ÇâÊ±∫Ê∏àÊÉÖÂ†±„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const savedPaymentStatus = localStorage.getItem('paymentStatus')
      const savedSelectedPlan = localStorage.getItem('selectedPlan')
      const savedUserInfo = localStorage.getItem('userInfo')
      
      console.log('üîç Ê±∫Ê∏àÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ:', {
        paymentSuccess,
        sessionId,
        userId,
        savedPaymentStatus,
        savedSelectedPlan,
        savedUserInfo
      })
      
      if (paymentSuccess === 'true' || sessionId) {
        // StripeÊ±∫Ê∏àÊàêÂäü„Åã„Çâ„ÅÆÊàª„Çä
        setPaymentStatus('completed')
        setIsPaid(true)
        setShowPricing(false)
        
        // Ê±∫Ê∏àÂÆå‰∫ÜÂæå„ÄÅ„É¶„Éº„Ç∂„Éº„Çí„Ç∑„Çπ„ÉÜ„É†„Å´„É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„Å´„Åô„Çã
        if (savedUserInfo) {
          try {
            const userInfo = JSON.parse(savedUserInfo)
            
            // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Å´Ê±∫Ê∏àÊ∏à„Åø„Çø„Ç∞„ÇíËøΩÂä†
            const updatedUserInfo = {
              ...userInfo,
              paymentStatus: 'completed',
              paidAt: new Date().toISOString(),
              subscriptionActive: true
            }
            
            // „É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„ÇíÊõ¥Êñ∞
            localStorage.setItem('userInfo', JSON.stringify(updatedUserInfo))
            localStorage.setItem('currentUser', JSON.stringify(updatedUserInfo))
            localStorage.setItem('authToken', `token_${updatedUserInfo.userId}`)
            
            // „Ç∑„Çπ„ÉÜ„É†„Å´„É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„ÇíË®≠ÂÆö
            setIsLoggedIn(true)
            setCurrentUser(updatedUserInfo)
            setUserRole('STUDENT')
            setHasValidSubscription(true)
            
            // „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„Å´„ÇÇÁä∂ÊÖã„ÇíË®òÈå≤
            sessionService.recordCheckpoint(sessionService.CHECKPOINTS.PAYMENT_COMPLETED, {
              userId: updatedUserInfo.userId,
              paymentStatus: 'completed',
              subscriptionActive: true
            })
            
            sessionService.recordCheckpoint(sessionService.CHECKPOINTS.LOGIN_COMPLETED, {
              userId: updatedUserInfo.userId,
              userRole: 'STUDENT',
              hasValidSubscription: true
            })
            
            console.log('‚úÖ Ê±∫Ê∏àÂÆå‰∫Ü - „É¶„Éº„Ç∂„Éº„Çí„Ç∑„Çπ„ÉÜ„É†„Å´„É≠„Ç∞„Ç§„É≥:', updatedUserInfo)
          } catch (error) {
            console.error('üö® „É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅÆÂá¶ÁêÜ„Å´Â§±Êïó:', error)
          }
        }
        
        if (savedSelectedPlan) {
          try {
            const planData = JSON.parse(savedSelectedPlan)
            setSelectedPlan(planData)
            console.log('‚úÖ Ê±∫Ê∏àÂÆå‰∫Ü:', planData)
          } catch (error) {
            console.error('üö® „Éó„É©„É≥„Éá„Éº„Çø„ÅÆÂæ©ÂÖÉ„Å´Â§±Êïó:', error)
          }
        }
        
        // URLÂ±•Ê≠¥„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        window.history.replaceState({}, document.title, window.location.pathname)
        
        // Ê±∫Ê∏àÂÆå‰∫Ü„ÇílocalStorage„Å´‰øùÂ≠ò
        localStorage.setItem('paymentStatus', 'completed')
        localStorage.setItem('isPaid', 'true')
        
      } else if (savedPaymentStatus === 'completed') {
        // Êó¢„Å´Ê±∫Ê∏àÊ∏à„Åø - „Ç∑„Çπ„ÉÜ„É†„Å´„É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„ÇíÂæ©ÂÖÉ
        setPaymentStatus('completed')
        setIsPaid(true)
        setShowPricing(false)
        
        if (savedUserInfo) {
          try {
            const userInfo = JSON.parse(savedUserInfo)
            
            // „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥Áä∂ÊÖã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
            if (userInfo.subscriptionActive !== false) {
              setIsLoggedIn(true)
              setCurrentUser(userInfo)
              setUserRole('STUDENT')
              setHasValidSubscription(true)
              
              // „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„Å´„ÇÇÁä∂ÊÖã„ÇíË®òÈå≤
              sessionService.recordCheckpoint(sessionService.CHECKPOINTS.LOGIN_COMPLETED, {
                userId: userInfo.userId,
                userRole: 'STUDENT',
                hasValidSubscription: true
              })
              
              console.log('‚úÖ Ê±∫Ê∏àÊ∏à„ÅøÁä∂ÊÖã„ÇíÂæ©ÂÖÉ - „Ç∑„Çπ„ÉÜ„É†„Å´„É≠„Ç∞„Ç§„É≥:', userInfo)
            } else {
              console.log('‚ö†Ô∏è „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÅåÈùû„Ç¢„ÇØ„ÉÜ„Ç£„Éñ - „É≠„Ç∞„Ç§„É≥‰∏çÂèØ')
              setIsLoggedIn(false)
              setCurrentUser(null)
              setUserRole(null)
              setHasValidSubscription(false)
            }
          } catch (error) {
            console.error('üö® „É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅÆÂæ©ÂÖÉ„Å´Â§±Êïó:', error)
          }
        }
        
        if (savedSelectedPlan) {
          try {
            const planData = JSON.parse(savedSelectedPlan)
            setSelectedPlan(planData)
            console.log('‚úÖ Ê±∫Ê∏àÊ∏à„ÅøÁä∂ÊÖã„ÇíÂæ©ÂÖÉ:', planData)
          } catch (error) {
            console.error('üö® „Éó„É©„É≥„Éá„Éº„Çø„ÅÆÂæ©ÂÖÉ„Å´Â§±Êïó:', error)
          }
        }
      } else {
        // „Çª„ÉÉ„Ç∑„Éß„É≥„Çµ„Éº„Éì„Çπ„ÅåÁÑ°Âäπ„Åß„ÄÅÊ±∫Ê∏àÊÉÖÂ†±„ÇÇ„Å™„ÅÑÂ†¥Âêà„ÅÆ„Åø„É≠„Ç∞„Ç¢„Ç¶„ÉàÁä∂ÊÖã„Å´
        const authToken = localStorage.getItem('authToken')
        const savedUser = localStorage.getItem('currentUser')
        
        if (authToken && savedUser) {
          // Êó¢Â≠ò„ÅÆ„É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„ÇíÁ∂≠ÊåÅ
          try {
            const userData = JSON.parse(savedUser)
            setIsLoggedIn(true)
            setCurrentUser(userData)
            setUserRole(userData.userRole || 'STUDENT')
            setHasValidSubscription(true)
            setShowPricing(false)
            console.log('‚úÖ Êó¢Â≠ò„ÅÆ„É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„ÇíÁ∂≠ÊåÅ:', userData)
          } catch (error) {
            console.error('üö® Êó¢Â≠ò„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÅÆÂæ©ÂÖÉ„Å´Â§±Êïó:', error)
            // Á†¥Êêç„Éá„Éº„Çø„ÅÆÂ†¥Âêà„ÅØ„É≠„Ç∞„Ç¢„Ç¶„ÉàÁä∂ÊÖã„Å´
            setIsLoggedIn(false)
            setCurrentUser(null)
            setUserRole(null)
            setHasValidSubscription(false)
            setShowPricing(true)
          }
        } else {
          // Ë™çË®ºÊÉÖÂ†±„Åå„Å™„ÅÑÂ†¥Âêà„ÅÆ„Åø„É≠„Ç∞„Ç¢„Ç¶„ÉàÁä∂ÊÖã„Å´
          console.log('‚ÑπÔ∏è Ë™çË®ºÊÉÖÂ†±„Å™„Åó - ÊñôÈáë„Éó„É©„É≥„ÇíË°®Á§∫')
        }
        
        // Ê±∫Ê∏àÁä∂ÊÖã„ÅØÂ∏∏„Å´Êú™Ê±∫Ê∏à„Å®„Åó„Å¶Ë®≠ÂÆö
        setPaymentStatus(null)
        setIsPaid(false)
      }
    }
    
    checkPaymentStatus()
  }, [])

  // „É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„ÇíÂÆöÊúüÁöÑ„Å´Êõ¥Êñ∞Ôºà„Çª„ÉÉ„Ç∑„Éß„É≥Á∂≠ÊåÅÔºâ
  useEffect(() => {
    if (isLoggedIn && currentUser) {
      const updateSessionActivity = () => {
        const timestamp = new Date().toISOString();
        const sessionData = {
          user: currentUser,
          token: localStorage.getItem('authToken'),
          loginTime: localStorage.getItem('loginTime') || timestamp,
          lastActiveTime: timestamp
        };
        
        // „Çª„ÉÉ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇíÊõ¥Êñ∞
        localStorage.setItem('auth_data', JSON.stringify(sessionData));
        localStorage.setItem('pm_0001_session', JSON.stringify(sessionData));
        localStorage.setItem('lastActiveTime', timestamp);
      };
      
      // ÂàùÂõûÊõ¥Êñ∞
      updateSessionActivity();
      
      // 5ÂàÜ„Åî„Å®„Å´Êõ¥Êñ∞
      const interval = setInterval(updateSessionActivity, 5 * 60 * 1000);
      
      return () => clearInterval(interval);
    }
  }, [isLoggedIn, currentUser])

  // „Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫Â§âÊõ¥„ÅÆÁõ£Ë¶ñ
  useEffect(() => {
    const handleResize = () => {
      const newIsMobile = window.innerWidth < 768
      setIsMobile(newIsMobile)
      
      // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞: isMobileÂà§ÂÆö„Å®„Ç¶„Ç£„É≥„Éâ„Ç¶„Çµ„Ç§„Ç∫
      console.log('üîç Debug - isMobileÂà§ÂÆö („É™„Çµ„Ç§„Ç∫):', {
        windowWidth: window.innerWidth,
        isMobile: newIsMobile,
        timestamp: new Date().toLocaleTimeString()
      })
    }
    
    // ÂàùÂõû„É≠„Ç∞
    console.log('üîç Debug - isMobileÂà§ÂÆö (ÂàùÊúüÂåñ):', {
      windowWidth: window.innerWidth,
      isMobile: isMobile,
      timestamp: new Date().toLocaleTimeString()
    })
    
    window.addEventListener('resize', handleResize)
    
    // „É¢„Éê„Ç§„É´Áî®„Ç∞„É≠„Éº„Éê„É´„Çø„ÉÉ„ÉÅ„Ç§„Éô„É≥„Éà
    const handleGlobalTouchMove = (e) => {
      if (window.mobileTouch && window.mobileTouch.isDragging) {
        e.preventDefault()
      }
    }
    
    const handleGlobalTouchEnd = (e) => {
      if (window.mobileTouch) {
        // „Ç∞„É≠„Éº„Éê„É´„Çø„ÉÉ„ÉÅÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        if (window.mobileTouch.longPressTimer) {
          clearTimeout(window.mobileTouch.longPressTimer)
        }
        window.mobileTouch = null
        
        // „Éâ„É©„ÉÉ„Ç∞Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
        setCurrentDragTask(null)
        setDraggingTaskId(null)
        
        // „Éè„Ç§„É©„Ç§„Éà„ÇíÂâäÈô§
        document.querySelectorAll('[data-cell-info]').forEach(c => {
          c.classList.remove('bg-green-100')
        })
      }
    }
    
    if (isMobile) {
      document.addEventListener('touchmove', handleGlobalTouchMove, { passive: false })
      document.addEventListener('touchend', handleGlobalTouchEnd)
    }
    
    return () => {
      window.removeEventListener('resize', handleResize)
      if (isMobile) {
        document.removeEventListener('touchmove', handleGlobalTouchMove)
        document.removeEventListener('touchend', handleGlobalTouchEnd)
      }
    }
  }, [isMobile])

  // Êú™ÈÅîÊàê„Çø„Çπ„ÇØ„ÇíÂèéÈõÜ„Åô„ÇãÈñ¢Êï∞
  const getOverdueTasks = () => {
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    const todayKey = today.toISOString().split('T')[0]
    
    // Êú™ÈÅîÊàê„Çø„Çπ„ÇØ„ÇíÂèéÈõÜ
    
    const overdue = []
    
    // allTasksHistory„Åã„ÇâÈÅéÂéª„ÅÆÊú™ÂÆå‰∫Ü„Çø„Çπ„ÇØ„ÇíÂèéÈõÜ
    Object.entries(allTasksHistory).forEach(([dateKey, tasks]) => {
      if (dateKey < todayKey) {
        tasks.forEach(task => {
          if (!task.completed) {
            overdue.push({
              ...task,
              originalDate: dateKey
            })
          }
        })
      }
    })
    
    // scheduledTasks„Åã„ÇâÈÅéÂéª„ÅÆÊú™ÂÆå‰∫Ü„Çø„Çπ„ÇØ„ÇíÂèéÈõÜ
    Object.entries(scheduledTasks).forEach(([taskKey, task]) => {
      const dateKey = taskKey.split('-').slice(0, 3).join('-')
      if (dateKey < todayKey && !completedTasks[taskKey]) {
        overdue.push({
          ...task,
          originalDate: dateKey
        })
      }
    })
    
    return overdue
  }

  // Êñ∞Ê©üËÉΩ„ÅÆ„Éè„É≥„Éâ„É©„ÉºÈñ¢Êï∞
  const handleDateClick = (date) => {
    setSelectedDate(date)
    const dateKey = date.toISOString().split('T')[0]
    const dayPlans = studyPlans[dateKey] || []
    const tasksFromCalendar = convertPlansToTasks(dayPlans)
    
    // ÈÅ∏Êäû„Åó„ÅüÊó•‰ªò„ÅÆÈÄ±„ÇíË®àÁÆó„Åó„Å¶weekOffset„ÇíË®≠ÂÆö
    const today = new Date()
    const todayKey = today.toISOString().split('T')[0]
    const isToday = dateKey === todayKey
    
    // ÈÅ∏Êäû„Åó„ÅüÊó•‰ªò„ÅåÂê´„Åæ„Çå„ÇãÈÄ±„ÅÆ„Ç™„Éï„Çª„ÉÉ„Éà„ÇíË®àÁÆó
    const selectedWeekStart = new Date(date)
    const selectedDayOfWeek = selectedWeekStart.getDay()
    selectedWeekStart.setDate(selectedWeekStart.getDate() - selectedDayOfWeek)
    
    const todayWeekStart = new Date(today)
    const todayDayOfWeek = todayWeekStart.getDay()
    todayWeekStart.setDate(todayWeekStart.getDate() - todayDayOfWeek)
    
    const weekDiff = Math.round((selectedWeekStart - todayWeekStart) / (7 * 24 * 60 * 60 * 1000))
    setWeekOffset(weekDiff)
    
    if (isToday) {
      // ‰ªäÊó•„ÅÆÂ†¥Âêà„ÅØ„ÄÅ‰ªäÊó•„ÅÆ„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´ËøΩÂä†
      setTodayTasks(prevTasks => {
        const existingTaskIds = prevTasks.map(task => task.id)
        const newTasks = tasksFromCalendar.filter(task => !existingTaskIds.includes(task.id))
        return [...prevTasks, ...newTasks]
      })
      // „Éá„Ç§„É™„Éº„Çø„Çπ„ÇØ„Éó„Éº„É´„ÅØ„ÇØ„É™„Ç¢
      setDailyTaskPool([])
    } else {
      // ‰ªäÊó•‰ª•Â§ñ„ÅÆÂ†¥Âêà„ÅØ„ÄÅ„Éá„Ç§„É™„Éº„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´Ë®≠ÂÆö„Åó„ÄÅ‰ªäÊó•„ÅÆ„Çø„Çπ„ÇØ„ÅØ„ÇØ„É™„Ç¢
      setDailyTaskPool(tasksFromCalendar)
      setTodayTasks([])
    }
    
    updateCurrentView('planner')
  }

  // ÂèÇËÄÉÊõ∏Â≠¶ÁøíË®àÁîªÁîüÊàêÈñ¢Êï∞
  const generateBookStudyPlan = (goal) => {
    const totalPages = goal.totalPages
    const excludeDays = goal.excludeDays || [] // 0=Êó•ÊõúÊó•, 1=ÊúàÊõúÊó•, ..., 6=ÂúüÊõúÊó•
    
    // Êó•‰ªòÊñáÂ≠óÂàó„ÇíÂπ¥„ÄÅÊúà„ÄÅÊó•„Å´ÂàÜËß£„Åó„Å¶Ê≠£Á¢∫„Å´Date„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê
    const [startYear, startMonth, startDay] = goal.startDate.split('-').map(Number)
    const [endYear, endMonth, endDay] = goal.endDate.split('-').map(Number)
    
    const startDate = new Date(startYear, startMonth - 1, startDay) // Êúà„ÅØ0„Éô„Éº„Çπ
    const endDate = new Date(endYear, endMonth - 1, endDay)
    
    console.log('ÈñãÂßãÊó•:', startDate.toDateString(), 'ÁµÇ‰∫ÜÊó•:', endDate.toDateString())
    
    // Â≠¶ÁøíÂèØËÉΩÊó•Êï∞„ÇíË®àÁÆó
    const studyDays = []
    const currentDate = new Date(startDate)
    
    // ÈñãÂßãÊó•„Åã„ÇâÁµÇ‰∫ÜÊó•„Åæ„Åß1Êó•„Åö„Å§„ÉÅ„Çß„ÉÉ„ÇØ
    while (currentDate <= endDate) {
      const dayOfWeek = currentDate.getDay()
      if (!excludeDays.includes(dayOfWeek)) {
        studyDays.push(new Date(currentDate))
      }
      currentDate.setDate(currentDate.getDate() + 1)
    }
    
    
    if (studyDays.length === 0) {
      alert('Â≠¶ÁøíÂèØËÉΩ„Å™Êó•„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÈô§Â§ñ„Åô„ÇãÊõúÊó•„ÇíË¶ãÁõ¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
      return { dailyPages: 0, schedule: [] }
    }
    
    // 1Êó•„ÅÇ„Åü„Çä„ÅÆ„Éö„Éº„Ç∏Êï∞„ÇíË®àÁÆó
    const dailyPages = Math.ceil(totalPages / studyDays.length)
    
    // Â≠¶Áøí„Çπ„Ç±„Ç∏„É•„Éº„É´„ÇíÁîüÊàê
    const schedule = []
    let currentPage = 1
    
    studyDays.forEach((date, index) => {
      const startPage = currentPage
      const endPage = Math.min(currentPage + dailyPages - 1, totalPages)
      const pages = endPage - startPage + 1
      
      // Êó•‰ªò„ÇíYYYY-MM-DDÂΩ¢Âºè„ÅßÊ≠£Á¢∫„Å´ÁîüÊàê
      const year = date.getFullYear()
      const month = String(date.getMonth() + 1).padStart(2, '0')
      const day = String(date.getDate()).padStart(2, '0')
      const dateString = `${year}-${month}-${day}`
      
      schedule.push({
        date: dateString,
        startPage,
        endPage,
        pages
      })
      
      
      currentPage = endPage + 1
    })
    
    return { dailyPages, schedule }
  }

  const handleGenerateStudyPlan = () => {
    if (studyBooks.length === 0) {
      alert('ÂèÇËÄÉÊõ∏„ÇíËøΩÂä†„Åó„Å¶„Åã„ÇâÂ≠¶ÁøíË®àÁîª„ÇíÁîüÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ')
      return
    }
    
    const newStudyPlans = generateStudyPlan(studyBooks, new Date())
    setStudyPlans(newStudyPlans)
    
    // ‰ªäÊó•„ÅÆÊó•‰ªò„ÅÆ„Çø„Çπ„ÇØ„Åå„ÅÇ„Çå„Å∞„ÄÅ‰ªäÊó•„ÅÆ„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´ËøΩÂä†
    const today = new Date()
    const todayKey = today.toISOString().split('T')[0]
    const todayPlans = newStudyPlans[todayKey] || []
    
    if (todayPlans.length > 0) {
      const todayTasks = convertPlansToTasks(todayPlans)
      
      setTodayTasks(prevTasks => {
        const existingTaskIds = prevTasks.map(task => task.id)
        const newTasks = todayTasks.filter(task => !existingTaskIds.includes(task.id))
        return [...prevTasks, ...newTasks]
      })
      // „Éá„Ç§„É™„Éº„Çø„Çπ„ÇØ„Éó„Éº„É´„Çí„ÇØ„É™„Ç¢Ôºà‰ªäÊó•„ÅÆ„Çø„Çπ„ÇØ„ÅåÁîüÊàê„Åï„Çå„Åü„Åü„ÇÅÔºâ
      setDailyTaskPool([])
    }
    
    const stats = calculateStudyPlanStats(newStudyPlans, studyBooks)
    alert(`Â≠¶ÁøíË®àÁîª„ÇíÁîüÊàê„Åó„Åæ„Åó„ÅüÔºÅ\nÁ∑èÂ≠¶ÁøíÊó•Êï∞: ${stats.totalDays}Êó•\nÁ∑èÂ≠¶ÁøíÊôÇÈñì: ${stats.totalHours}ÊôÇÈñì${todayPlans.length > 0 ? '\n‰ªäÊó•„ÅÆ„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´ËøΩÂä†„Åï„Çå„Åæ„Åó„ÅüÔºÅ' : ''}`)
  }

  const createDragImage = (task, isSmall = false) => {
    const dragElement = document.createElement('div')
    dragElement.className = `p-2 rounded-md border-2 bg-white shadow-lg ${isSmall ? 'text-xs' : 'text-sm'}`
    dragElement.style.cssText = `
      position: absolute;
      top: -1000px;
      left: -1000px;
      width: ${isSmall ? '120px' : '200px'};
      height: ${isSmall ? '40px' : '60px'};
      z-index: 1000;
      pointer-events: none;
      transform: ${isSmall ? 'scale(0.8)' : 'scale(1)'};
    `
    
    const priorityColors = {
      high: 'border-red-300 bg-red-50',
      medium: 'border-yellow-300 bg-yellow-50',
      low: 'border-green-300 bg-green-50'
    }
    
    dragElement.className += ` ${priorityColors[task.priority] || priorityColors.medium}`
    dragElement.innerHTML = `
      <div class="flex items-center space-x-1">
        <span>${task.priority === 'high' ? 'üî¥' : task.priority === 'medium' ? 'üü°' : 'üü¢'}</span>
        <span class="font-medium truncate">${task.title}</span>
      </div>
    `
    
    document.body.appendChild(dragElement)
    return dragElement
  }

  // „Çø„Çπ„ÇØ„Éâ„É©„ÉÉ„Ç∞ÈñãÂßã„Éè„É≥„Éâ„É©„ÉºÔºàÈ´òÂ∫¶„Å™„Éâ„É©„ÉÉ„Ç∞Ê©üËÉΩ‰ªò„ÅçÔºâ
  const handleTaskDragStart = (e, task, fromLocation = null) => {
    console.log('üîç Debug - handleTaskDragStart called:', { task, fromLocation })
    
    // Âü∫Êú¨ÁöÑ„Å™„Éâ„É©„ÉÉ„Ç∞„Éá„Éº„Çø„ÇíË®≠ÂÆö
    e.dataTransfer.setData('task', JSON.stringify(task))
    e.dataTransfer.setData('fromLocation', fromLocation || 'pool')
    
    // ÁèæÂú®„ÅÆ„Éâ„É©„ÉÉ„Ç∞„Çø„Çπ„ÇØ„ÇíË®≠ÂÆö
    setCurrentDragTask(task)
    
    // „Ç´„Çπ„Çø„É†„Éâ„É©„ÉÉ„Ç∞„Ç§„É°„Éº„Ç∏„Çí‰ΩúÊàê
    const dragImage = createDragImage(task, false)
    setDragImageElement(dragImage)
    e.dataTransfer.setDragImage(dragImage, 100, 30)
    
    // „Éâ„É©„ÉÉ„Ç∞„ÅåÈñãÂßã„Åï„Çå„ÅüÂæå„Å´„Çø„Çπ„ÇØ„ÇíÈùûË°®Á§∫„Å´„Åô„ÇãÔºàÂ∞ë„ÅóÈÅÖ„Çâ„Åõ„ÇãÔºâ
    setTimeout(() => {
      setDraggingTaskId(task.id)
    }, 50)
    
    // „Éâ„É©„ÉÉ„Ç∞ÁµÇ‰∫ÜÊôÇ„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíË®≠ÂÆö
    const cleanup = () => {
      setCurrentDragTask(null)
      setDragImageElement(null)
      setDraggingOverCalendar(false)
      setDraggingTaskId(null)
      if (dragImage && dragImage.parentNode) {
        dragImage.parentNode.removeChild(dragImage)
      }
      document.removeEventListener('dragend', cleanup)
    }
    
    document.addEventListener('dragend', cleanup)
  }

  // Âü∫Êú¨ÁöÑ„Å™„Éè„É≥„Éâ„É©„ÉºÈñ¢Êï∞
  const handleDragStart = (e, task, fromLocation = null) => {
    e.dataTransfer.setData('task', JSON.stringify(task))
    e.dataTransfer.setData('fromLocation', fromLocation || '')
  }

  const handleDragOver = (e) => {
    e.preventDefault()
    if (!draggingOverCalendar && currentDragTask) {
      setDraggingOverCalendar(true)
      
      // „Ç´„É¨„É≥„ÉÄ„Éº‰∏ä„ÅßÂ∞è„Åï„Å™„Éâ„É©„ÉÉ„Ç∞„Ç§„É°„Éº„Ç∏„Å´Â§âÊõ¥
      if (dragImageElement) {
        dragImageElement.style.transform = 'scale(0.6)'
        dragImageElement.style.width = '100px'
        dragImageElement.style.height = '32px'
        dragImageElement.style.fontSize = '10px'
      }
    }
  }

  const handleDragLeave = (e) => {
    // „Ç´„É¨„É≥„ÉÄ„ÉºÈ†òÂüü„Åã„ÇâÂÆåÂÖ®„Å´Âá∫„ÅüÂ†¥Âêà„ÅÆ„Åøfalse„Å´Ë®≠ÂÆö
    if (!e.currentTarget.contains(e.relatedTarget)) {
      setDraggingOverCalendar(false)
      
      // „Éâ„É©„ÉÉ„Ç∞„Ç§„É°„Éº„Ç∏„ÇíÂÖÉ„ÅÆ„Çµ„Ç§„Ç∫„Å´Êàª„Åô
      if (dragImageElement && currentDragTask) {
        dragImageElement.style.transform = 'scale(1)'
        dragImageElement.style.width = '200px'
        dragImageElement.style.height = '60px'
        dragImageElement.style.fontSize = '14px'
      }
    }
  }

  const handleDrop = (e, dateKey, hour) => {
    e.preventDefault()
    setDraggingOverCalendar(false) // „Éâ„É©„ÉÉ„Ç∞Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
    
    let task, fromLocation
    
    // ÈÄöÂ∏∏„ÅÆ„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„ÅÆÂ†¥Âêà
    if (e.dataTransfer && e.dataTransfer.getData('task')) {
      task = JSON.parse(e.dataTransfer.getData('task'))
      fromLocation = e.dataTransfer.getData('fromLocation') || 'taskPool'
    }
    // „Çø„Çπ„ÇØ„Éó„Éº„É´„Åã„Çâ„ÅÆ„Çø„ÉÉ„ÉÅ„Éâ„É©„ÉÉ„Ç∞„ÅÆÂ†¥Âêà
    else if (window.taskPoolTouch && window.taskPoolTouch.isDragging) {
      task = window.taskPoolTouch.task
      fromLocation = 'taskPool'
      console.log('üîç Debug - „Çø„Çπ„ÇØ„Éó„Éº„É´„Åã„Çâ„ÅÆ„Çø„ÉÉ„ÉÅ„Éâ„É≠„ÉÉ„Éó:', { task, dateKey, hour })
    }
    // „Ç´„É¨„É≥„ÉÄ„ÉºÂÜÖ„Åß„ÅÆ„Çø„ÉÉ„ÉÅ„Éâ„É©„ÉÉ„Ç∞„ÅÆÂ†¥Âêà
    else if (window.mobileTouch && window.mobileTouch.isDragging) {
      task = window.mobileTouch.scheduledTask
      fromLocation = `scheduled-${window.mobileTouch.taskKey}`
      console.log('üîç Debug - „Ç´„É¨„É≥„ÉÄ„ÉºÂÜÖ„Åß„ÅÆ„Çø„ÉÉ„ÉÅ„Éâ„É≠„ÉÉ„Éó:', { task, dateKey, hour })
    }
    
    if (!task) return
    
    const newScheduledTasks = { ...scheduledTasks }
    const key = `${dateKey}-${hour}`
    
    if (newScheduledTasks[key]) return
    
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÈñãÂßã
    setAnimatingTasks(prev => new Set([...prev, key]))
    
    // „Çø„Çπ„ÇØ„Éó„Éº„É´„Åã„Çâ„ÅÆÁßªÂãï„ÅÆÂ†¥Âêà„ÄÅÂÖÉ„ÅÆ„É™„Çπ„Éà„Åã„ÇâÂâäÈô§
    if (fromLocation === 'taskPool') {
      // todayTasks„Å®dailyTaskPool„ÅÆ‰∏°Êñπ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const isInTodayTasks = todayTasks.some(t => t.id === task.id)
      const isInDailyTaskPool = dailyTaskPool.some(t => t.id === task.id)
      
      if (isInTodayTasks) {
        setTodayTasks(todayTasks.filter(t => t.id !== task.id))
      }
      if (isInDailyTaskPool) {
        setDailyTaskPool(dailyTaskPool.filter(t => t.id !== task.id))
      }
      
      // ÁßªË°åÂ±•Ê≠¥„ÅÆ„É≠„Ç∞„ÇíË®òÈå≤
      console.log('üìã „Çø„Çπ„ÇØÁßªË°å„É≠„Ç∞:', {
        action: 'task_moved_to_calendar',
        taskId: task.id,
        taskTitle: task.title,
        from: 'taskPool',
        to: { date: dateKey, hour },
        taskDetails: {
          priority: task.priority,
          subject: task.subject,
          description: task.description,
          estimatedTime: task.estimatedTime,
          dueDate: task.dueDate
        },
        timestamp: new Date().toISOString(),
        userId: currentUser?.id
      })
    }
    // „Çπ„Ç±„Ç∏„É•„Éº„É´Èñì„Åß„ÅÆÁßªÂãï
    else if (fromLocation.startsWith('scheduled-')) {
      const oldKey = fromLocation.replace('scheduled-', '')
      delete newScheduledTasks[oldKey]
      
      // ÁßªÂãïÂ±•Ê≠¥„ÅÆ„É≠„Ç∞„ÇíË®òÈå≤
      console.log('üìã „Çø„Çπ„ÇØÁßªÂãï„É≠„Ç∞:', {
        action: 'task_rescheduled',
        taskId: task.id,
        taskTitle: task.title,
        from: oldKey,
        to: { date: dateKey, hour },
        timestamp: new Date().toISOString(),
        userId: currentUser?.id
      })
    }
    
    // „Ç´„É¨„É≥„ÉÄ„Éº„Ç§„Éô„É≥„Éà„Å®„Åó„Å¶Â§âÊèõÔºàË©≥Á¥∞ÊÉÖÂ†±„Çí‰øùÊåÅÔºâ
    newScheduledTasks[key] = {
      ...task,
      scheduledDate: dateKey,
      scheduledHour: hour,
      duration: task.duration || task.estimatedTime ? Math.ceil(task.estimatedTime / 60) : 1,
      // ÂÖÉ„ÅÆ„Çø„Çπ„ÇØÊÉÖÂ†±„Çí‰øùÊåÅ
      originalTaskData: {
        id: task.id,
        title: task.title,
        subject: task.subject,
        description: task.description,
        priority: task.priority,
        dueDate: task.dueDate,
        estimatedTime: task.estimatedTime,
        color: task.color
      }
    }
    setScheduledTasks(newScheduledTasks)
    
    // „ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà: ÂàùÂõû„Çø„Çπ„ÇØ„Çπ„Ç±„Ç∏„É•„Éº„É´
    if (Object.keys(scheduledTasks).length === 0 && Object.keys(newScheduledTasks).length > 0) {
      sessionService.recordCheckpoint(sessionService.CHECKPOINTS.FIRST_TASK_SCHEDULED, {
        taskId: draggingTaskId,
        scheduledDate: dateKey,
        scheduledHour: hour,
        userId: currentUser?.id,
        timestamp: new Date().toISOString()
      })
    }
    
    // „Çø„ÉÉ„ÉÅÁä∂ÊÖã„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
    if (window.taskPoolTouch) {
      window.taskPoolTouch = null
    }
    if (window.mobileTouch) {
      window.mobileTouch = null
    }
    
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÁµÇ‰∫ÜÔºà500msÂæåÔºâ
    setTimeout(() => {
      setAnimatingTasks(prev => {
        const newSet = new Set(prev)
        newSet.delete(key)
        return newSet
      })
    }, 500)
  }

  const handleTaskClick = (task, taskKey) => {
    const currentTime = Date.now()
    const lastClickTime = taskClickCount[taskKey]?.time || 0
    const clickCount = taskClickCount[taskKey]?.count || 0
    
    // „ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØÂà§ÂÆöÔºà500ms‰ª•ÂÜÖÔºâ
    if (currentTime - lastClickTime < 500) {
      // „ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØÁ¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíË°®Á§∫
      setShowDeleteConfirm({
        task,
        taskKey,
        message: `„Äå${task.title}„Äç„Çí„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´Êàª„Åó„Åæ„Åô„ÅãÔºü`
      })
      
      // „ÇØ„É™„ÉÉ„ÇØ„Ç´„Ç¶„É≥„Éà„Çí„É™„Çª„ÉÉ„Éà
      setTaskClickCount(prev => ({
        ...prev,
        [taskKey]: { time: 0, count: 0 }
      }))
    } else {
      // ÊúÄÂàù„ÅÆ„ÇØ„É™„ÉÉ„ÇØ
      setTaskClickCount(prev => ({
        ...prev,
        [taskKey]: { time: currentTime, count: clickCount + 1 }
      }))
      
      // 500msÂæå„Å´„ÇØ„É™„ÉÉ„ÇØ„Ç´„Ç¶„É≥„Éà„Çí„É™„Çª„ÉÉ„Éà
      setTimeout(() => {
        setTaskClickCount(prev => ({
          ...prev,
          [taskKey]: { time: 0, count: 0 }
        }))
      }, 500)
    }
  }
  
  // „Çø„Çπ„ÇØÂâäÈô§Á¢∫Ë™ç„ÅÆÂÆüË°å
  const confirmTaskRemoval = () => {
    if (!showDeleteConfirm) return
    
    const { task, taskKey } = showDeleteConfirm
    
    // „Çπ„Ç±„Ç∏„É•„Éº„É´„Åï„Çå„Åü„Çø„Çπ„ÇØ„Çí„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´Êàª„Åô
    const newScheduledTasks = { ...scheduledTasks }
    delete newScheduledTasks[taskKey]
    setScheduledTasks(newScheduledTasks)
    
    // ‰ªäÊó•„ÅÆÊó•‰ªò„Åã„Å©„ÅÜ„Åã„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    const today = new Date()
    const todayKey = today.toISOString().split('T')[0]
    const taskDate = taskKey.split('-')[0] + '-' + taskKey.split('-')[1] + '-' + taskKey.split('-')[2]
    const isToday = taskDate === todayKey
    
    if (isToday) {
      // ‰ªäÊó•„ÅÆ„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´Êàª„Åô
      setTodayTasks(prevTasks => [...prevTasks, task])
    } else {
      // „Éá„Ç§„É™„Éº„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´Êàª„Åô
      setDailyTaskPool(prevTasks => [...prevTasks, task])
    }
    
    setShowDeleteConfirm(null)
  }
  
  // „Çø„Çπ„ÇØÂâäÈô§Á¢∫Ë™ç„ÅÆ„Ç≠„É£„É≥„Çª„É´
  const cancelTaskRemoval = () => {
    setShowDeleteConfirm(null)
  }

  // ÂÑ™ÂÖàÈ†Ü‰Ωç„Å´„Çà„ÇãËâ≤„ÇíÂèñÂæó„Åô„ÇãÈñ¢Êï∞
  const getPriorityColor = (priority) => {
    const colors = {
      high: 'bg-red-500',
      medium: 'bg-yellow-500',
      low: 'bg-green-500'
    }
    return colors[priority] || colors.medium
  }

  const toggleTaskComplete = (taskId, location) => {
    if (location === 'pool') {
      if (dailyTaskPool.length > 0) {
        setDailyTaskPool(dailyTaskPool.map(task =>
          task.id === taskId ? { ...task, completed: !task.completed } : task
        ))
      } else {
        setTodayTasks(todayTasks.map(task =>
          task.id === taskId ? { ...task, completed: !task.completed } : task
        ))
      }
    } else if (location.startsWith('scheduled-')) {
      const key = location.replace('scheduled-', '')
      setCompletedTasks({
        ...completedTasks,
        [key]: !completedTasks[key]
      })
    }
  }

  // „É¢„Éê„Ç§„É´Âà§ÂÆö„Å®„É™„Ç¢„É´„Çø„Ç§„É†Êõ¥Êñ∞

  // ÁèæÂú®ÊôÇÂàª„Çí1ÂàÜ„Åî„Å®„Å´Êõ¥Êñ∞
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date())
    }, 60000) // 1ÂàÜ„Åî„Å®

    return () => clearInterval(timer)
  }, [])

  const getDates = () => {
    const today = new Date()
    const dates = []
    
    // PC„Éª„É¢„Éê„Ç§„É´ÂÖ±ÈÄö: ÈÄ±ÈñìË°®Á§∫ÔºàweekOffset„ÇíËÄÉÊÖÆÔºâ
    const dayOfWeek = today.getDay()
    const startOfWeek = new Date(today)
    startOfWeek.setDate(today.getDate() - dayOfWeek + (weekOffset * 7))
    
    for (let i = 0; i < 7; i++) {
      const date = new Date(startOfWeek)
      date.setDate(startOfWeek.getDate() + i)
      dates.push(date)
    }
    
    return dates
  }

  const getWeekDates = (offset = 0, twoWeeks = false) => {
    const today = new Date()
    const dayOfWeek = today.getDay()
    const startOfWeek = new Date(today)
    startOfWeek.setDate(today.getDate() - dayOfWeek + (offset * 7))

    const weekDates = []
    const days = twoWeeks ? 14 : 7
    for (let i = 0; i < days; i++) {
      const date = new Date(startOfWeek)
      date.setDate(startOfWeek.getDate() + i)
      weekDates.push(date)
    }
    return weekDates
  }

  const dates = getDates()
  const weekDates = getWeekDates(weekOffset, viewMode === 'twoWeeks')
  const dayNames = ['Êó•', 'Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë', 'Âúü']
  const today = new Date()
  const todayString = `${today.getFullYear()}Âπ¥${today.getMonth() + 1}Êúà${today.getDate()}Êó•Ôºà${dayNames[today.getDay()]}Ôºâ`

  // ÁèæÂú®ÊôÇÂàª„Ç§„É≥„Ç∏„Ç±„Éº„Çø„ÉºÈñ¢ÈÄ£„ÅÆÈñ¢Êï∞
  const getCurrentTimePosition = () => {
    const hours = currentTime.getHours()
    const minutes = currentTime.getMinutes()
    
    // 24ÊôÇÈñì„Ç∞„É™„ÉÉ„Éâ„Åß„ÅÆ‰ΩçÁΩÆ„ÇíË®àÁÆóÔºà0ÊôÇ„Åã„Çâ24ÊôÇ„Åæ„ÅßÔºâ
    // „É¢„Éê„Ç§„É´: 1ÊôÇÈñì„ÅÇ„Åü„Çä50px„ÄÅPC: 1ÊôÇÈñì„ÅÇ„Åü„Çä120pxÔºà„Ç´„É¨„É≥„ÉÄ„Éº„Çª„É´È´ò„Åï„Å®Áµ±‰∏ÄÔºâ
    const hourHeight = isMobile ? 50 : 120
    const totalPosition = (hours * hourHeight) + (minutes * hourHeight / 60)
    return totalPosition
  }

  const getCurrentTimeString = () => {
    // 24ÊôÇÈñìË°®Ë®ò„ÅßÊôÇÂàª„ÇíË°®Á§∫
    return currentTime.toLocaleTimeString('ja-JP', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false // 24ÊôÇÈñìË°®Ë®ò„ÇíÂº∑Âà∂
    })
  }

  const isCurrentTimeInGrid = () => {
    const hours = currentTime.getHours()
    return hours >= 0 && hours <= 23 // 24ÊôÇÈñìË°®Á§∫
  }

  // ÈùûÂêåÊúü„Åß„Éà„Éº„ÇØ„É≥„ÅÆÊúâÂäπÊÄß„ÇíÁ¢∫Ë™ç„Åó„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶Ë™çË®ºÁä∂ÊÖã„ÇíÊõ¥Êñ∞
  useEffect(() => {
    const validateAuthToken = async () => {
      if (isLoggedIn && currentUser) {
        try {
          console.log('üîç „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„Åß„Éà„Éº„ÇØ„É≥„ÅÆÊúâÂäπÊÄß„ÇíÁ¢∫Ë™ç‰∏≠...');
          const response = await apiService.getCurrentUser();
          
          if (response.success) {
            const user = response.data.user;
            const updatedUserData = {
              id: user.id,
              email: user.email,
              name: user.name,
              userRole: user.role,
              avatar_url: user.avatar_url
            };
            
            console.log('‚úÖ „Çµ„Éº„Éê„Éº„Åã„ÇâÊúÄÊñ∞ÊÉÖÂ†±„ÇíÂèñÂæó:', updatedUserData);
            // „Çµ„Éº„Éê„Éº„Åã„ÇâÊúÄÊñ∞ÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„ÅüÂ†¥Âêà„ÅØÊõ¥Êñ∞
            setCurrentUser(updatedUserData);
            setUserRole(user.role);
            localStorage.setItem('currentUser', JSON.stringify(updatedUserData));
          } else {
            console.warn('‚ö†Ô∏è Token validation failed, but keeping local session');
            // „Éà„Éº„ÇØ„É≥„ÅåÁÑ°Âäπ„Åß„ÇÇ‰∏ÄÂÆöÊúüÈñì„ÅØ„É≠„Éº„Ç´„É´„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÁ∂≠ÊåÅ
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Failed to validate token, but keeping local session:', error);
          // APIÊé•Á∂ö„Ç®„É©„Éº„Åß„ÇÇ„É≠„Éº„Ç´„É´„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÁ∂≠ÊåÅ
        }
      }
    };
    
    // „Çø„Çπ„ÇØÂ±•Ê≠¥„ÇíË™≠„ÅøËæº„ÇÄ
    const savedTasksHistory = localStorage.getItem('allTasksHistory');
    if (savedTasksHistory) {
      try {
        setAllTasksHistory(JSON.parse(savedTasksHistory));
      } catch (error) {
        console.error('Failed to load tasks history:', error);
      }
    }
    
    // Ë™çË®ºÁä∂ÊÖã„ÅåÂæ©ÂÖÉ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅÆ„Åø„Éà„Éº„ÇØ„É≥„ÇíÁ¢∫Ë™ç
    if (isLoggedIn) {
      validateAuthToken();
    }
  }, [isLoggedIn, currentUser]);

  // „Çø„Çπ„ÇØ„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„ÇâÂ±•Ê≠¥„Çí‰øùÂ≠ò
  useEffect(() => {
    if (todayTasks.length > 0 || Object.keys(scheduledTasks).length > 0) {
      const today = new Date().toISOString().split('T')[0];
      const updatedHistory = {
        ...allTasksHistory,
        [today]: todayTasks
      };
      setAllTasksHistory(updatedHistory);
      localStorage.setItem('allTasksHistory', JSON.stringify(updatedHistory));
    }
  }, [todayTasks, scheduledTasks]);



  // Ë™çË®ºÂàùÊúüÂåñ„ÅåÂêåÊúüÁöÑ„Å´Ë°å„Çè„Çå„Çã„Åü„ÇÅ„ÄÅ„É≠„Éº„Éá„Ç£„É≥„Ç∞ÁîªÈù¢„ÅØ‰∏çË¶Å

  // „Éá„É¢„Éö„Éº„Ç∏„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ
  const urlParams = new URLSearchParams(window.location.search);
  if (urlParams.get('demo') === 'mobile-weekly-planner') {
    return <MobileWeeklyPlannerDemo />;
  }

  // Êñ∞„Éï„É≠„Éº: ÊñôÈáë„Éó„É©„É≥ ‚Üí Êñ∞Ë¶èÁôªÈå≤ ‚Üí Ê±∫Ê∏à ‚Üí „Ç¢„Éó„É™Âà©Áî®
  
  // 1. ÊñôÈáë„Éó„É©„É≥Ë°®Á§∫ÔºàÊúÄÂàù„ÅÆÁîªÈù¢Ôºâ
  // 1. „É≠„Ç∞„Ç§„É≥ÁîªÈù¢„ÅÆË°®Á§∫
  if (showLoginScreen) {
    return (
      <LoginScreen
        onLogin={(success) => {
          if (success) {
            setShowLoginScreen(false)
            setIsLoggedIn(true)
            // Êó¢„Å´Ê±∫Ê∏àÊ∏à„Åø„ÅÆÂ†¥Âêà„ÅØ„Åô„Åê„Å´„Ç∑„Çπ„ÉÜ„É†Âà©Áî®ÂèØËÉΩ
            const userInfo = JSON.parse(localStorage.getItem('currentUser') || '{}')
            if (userInfo.subscriptionActive || userInfo.paymentStatus === 'completed') {
              setIsPaid(true)
              setHasValidSubscription(true)
            }
          }
        }}
        onRoleChange={(role) => {
          setUserRole(role)
        }}
      />
    )
  }

  // 2. Ê±∫Ê∏àÁä∂ÊÖã„ÉÅ„Çß„ÉÉ„ÇØ - Êú™Ê±∫Ê∏à„ÅÆÂ†¥Âêà
  // „Éá„É¢„É¢„Éº„Éâ„Åß„ÅØ„Çπ„Ç≠„ÉÉ„Éó
  if (false && (!isPaid || !hasValidSubscription)) {
    // ÊúÄÂàù„ÅØÂ∏∏„Å´RegistrationFlow„ÅÆ„Ç∑„Çπ„ÉÜ„É†Ë™¨ÊòéÁîªÈù¢„Åã„ÇâÂßã„Åæ„Çã
    return (
      <RegistrationFlow
        selectedPlan={selectedPlan}
        onComplete={() => {
          setShowRegistrationFlow(false)
          setIsPaid(true)
          
          // „ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà: „É¶„Éº„Ç∂„ÉºÁôªÈå≤ÂÆå‰∫Ü
          const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}')
          sessionService.recordCheckpoint(sessionService.CHECKPOINTS.USER_REGISTRATION_COMPLETED, {
            userId: userInfo.userId,
            username: userInfo.username,
            email: userInfo.email,
            timestamp: new Date().toISOString()
          })
          
          // ÁèæÂú®„ÅÆ„Éì„É•„Éº„ÇíÊõ¥Êñ∞
          sessionService.updateCurrentView(sessionService.VIEWS.DASHBOARD)
        }}
        onBack={() => {
          // Êàª„Çã„Éú„Çø„É≥„ÅØ‰∏çË¶Å„Å†„Åå„ÄÅÂøµ„ÅÆ„Åü„ÇÅ
          setShowRegistrationFlow(false)
          setShowPricing(true)
        }}
        onLoginClick={() => {
          setShowLoginScreen(true)
        }}
      />
    )
  }
  
  // 2. Ê±∫Ê∏àÊ∏à„Åø„Å†„Åå„É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„Åß„Å™„ÅÑÂ†¥Âêà„ÅÆÂá¶ÁêÜ
  if (isPaid && hasValidSubscription && !isLoggedIn) {
    // Ê±∫Ê∏àÂÆå‰∫ÜÂæå„ÅØÁõ¥Êé•„Ç¢„Éó„É™„ÇíÂà©Áî®ÂèØËÉΩ„Å´„Åô„Çã
    setIsLoggedIn(true)
    const userInfo = JSON.parse(localStorage.getItem('userInfo') || '{}')
    const currentUser = {
      id: userInfo.userId || 'user-' + Date.now(),
      name: userInfo.username || '„É¶„Éº„Ç∂„Éº',
      email: userInfo.email || '',
      userRole: 'STUDENT',
      subscriptionActive: true,
      paymentStatus: 'completed'
    }
    setCurrentUser(currentUser)
    setUserRole('STUDENT')
    
    // „ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà: Ê±∫Ê∏àÂÆå‰∫Ü„Å®„É≠„Ç∞„Ç§„É≥ÂÆå‰∫Ü
    sessionService.recordCheckpoint(sessionService.CHECKPOINTS.PAYMENT_COMPLETED, {
      userId: currentUser.id,
      paymentStatus: 'completed',
      subscriptionActive: true,
      timestamp: new Date().toISOString()
    })
    
    sessionService.recordCheckpoint(sessionService.CHECKPOINTS.LOGIN_COMPLETED, {
      userId: currentUser.id,
      userRole: 'STUDENT',
      hasValidSubscription: true,
      timestamp: new Date().toISOString()
    })
    
    // ÁèæÂú®„ÅÆ„Éì„É•„Éº„ÇíÊõ¥Êñ∞
    sessionService.updateCurrentView(sessionService.VIEWS.DASHBOARD)
  }
  
  // 3. „Ç∑„Çπ„ÉÜ„É†ÂÖ•Â†¥ÊôÇ„ÅÆÊ±∫Ê∏à„ÉÅ„Çß„ÉÉ„ÇØ
  // „Éá„É¢„É¢„Éº„Éâ„Åß„ÅØ„Çπ„Ç≠„ÉÉ„Éó
  if (false && isLoggedIn && (!isPaid || !hasValidSubscription)) {
    // Ê±∫Ê∏àÁä∂ÊÖã„ÅåÁÑ°Âäπ„Å™Â†¥Âêà„ÅØ„É≠„Ç∞„Ç¢„Ç¶„Éà
    setIsLoggedIn(false)
    setCurrentUser(null)
    setUserRole(null)
    setIsPaid(false)
    setHasValidSubscription(false)
    
    console.log('‚ö†Ô∏è Ê±∫Ê∏àÁä∂ÊÖã„ÅåÁÑ°Âäπ - „É≠„Ç∞„Ç¢„Ç¶„ÉàÂá¶ÁêÜÂÆüË°å')
    
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="max-w-md w-full bg-white rounded-lg shadow-lg p-8 text-center">
          <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg className="w-8 h-8 text-red-600" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
          </div>
          <h2 className="text-2xl font-bold text-gray-900 mb-2">„Ç¢„ÇØ„Çª„ÇπÊ®©Èôê„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</h2>
          <p className="text-gray-600 mb-6">
            „Çµ„Éñ„Çπ„ÇØ„É™„Éó„Ç∑„Éß„É≥„ÅåÁÑ°Âäπ„Åã„ÄÅËß£Á¥Ñ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ<br />
            „Ç∑„Çπ„ÉÜ„É†„Çí„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åè„Å´„ÅØÊ±∫Ê∏à„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ
          </p>
          <button
            onClick={() => {
              setShowPricing(true)
              setShowRegistrationFlow(false)
            }}
            className="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition-colors"
          >
            „Éó„É©„É≥ÈÅ∏Êäû„Å∏
          </button>
        </div>
      </div>
    )
  }
  
  // Êóß„Ç≥„Éº„ÉâÔºöÊ±∫Ê∏àÂÆå‰∫ÜÂæå„ÅÆÊñ∞Ë¶èÁôªÈå≤„Éª„É≠„Ç∞„Ç§„É≥„Éï„É≠„ÉºÔºàÂâäÈô§‰∫àÂÆöÔºâ
  if (false && !isLoggedIn && isPaid) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-green-50 to-blue-50 flex items-center justify-center">
        <div className="max-w-md w-full">
          {/* Ê±∫Ê∏àÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏ */}
          <div className="bg-white rounded-lg shadow-lg p-8 mb-6">
            <div className="text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-green-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                </svg>
              </div>
              <h2 className="text-2xl font-bold text-gray-900 mb-2">Ê±∫Ê∏àÂÆå‰∫ÜÔºÅ</h2>
              <p className="text-gray-600 mb-4">
                {selectedPlan ? `${selectedPlan.name}„Å´„ÅîÁôªÈå≤„ÅÑ„Åü„Å†„Åç„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ` : '„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åç„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ'}
              </p>
              <p className="text-sm text-gray-500 mb-6">
                Á∂ö„ÅÑ„Å¶„ÄÅ„Ç¢„Ç´„Ç¶„É≥„Éà„Çí‰ΩúÊàê„Åó„Å¶Suna„ÇíÂßã„ÇÅ„Åæ„Åó„Çá„ÅÜ„ÄÇ
              </p>
            </div>
          </div>
          
          {/* „É≠„Ç∞„Ç§„É≥„ÉªÊñ∞Ë¶èÁôªÈå≤„Éï„Ç©„Éº„É† */}
          <LoginScreen
            onLogin={(loginStatus) => {
              console.log('üîç „É≠„Ç∞„Ç§„É≥ÊàêÂäü„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÂèó‰ø°:', loginStatus);
              if (loginStatus) {
                // localStorage „Åã„Çâ„É¶„Éº„Ç∂„Éº„Éá„Éº„Çø„ÇíË™≠„ÅøÂèñ„Çä
                try {
                  const savedUser = localStorage.getItem('currentUser');
                  const authToken = localStorage.getItem('authToken');
                  
                  if (savedUser) {
                    const userData = JSON.parse(savedUser);
                    console.log('üîç „É≠„Ç∞„Ç§„É≥ÊôÇ„É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøË®≠ÂÆö:', userData);
                    
                    // Áä∂ÊÖã„ÇíË®≠ÂÆö
                    setCurrentUser(userData);
                    setUserRole(userData.userRole || 'STUDENT');
                    setIsLoggedIn(true);
                    setHasValidSubscription(true);
                    setShowPricing(false);
                    
                    // ÁèæÂú®„ÅÆ„Éì„É•„Éº„ÇíË®≠ÂÆö
                    if (userData.userRole === 'INSTRUCTOR') {
                      updateCurrentView('dashboard');
                    } else {
                      updateCurrentView('goals');
                    }
                    
                    // ËøΩÂä†„ÅÆÊ∞∏Á∂öÂåñÂá¶ÁêÜ
                    const timestamp = new Date().toISOString();
                    const sessionData = {
                      user: userData,
                      token: authToken,
                      loginTime: timestamp,
                      lastActiveTime: timestamp
                    };
                    
                    // Ë§áÊï∞„ÅÆÂ†¥ÊâÄ„Å´‰øùÂ≠ò„Åó„Å¶ÂÜóÈï∑ÊÄß„ÇíÁ¢∫‰øù
                    localStorage.setItem('auth_data', JSON.stringify(sessionData));
                    localStorage.setItem('pm_0001_session', JSON.stringify(sessionData));
                    sessionStorage.setItem('currentUser', JSON.stringify(userData));
                    sessionStorage.setItem('authToken', authToken);
                    
                    console.log('‚úÖ „É≠„Ç∞„Ç§„É≥Áä∂ÊÖã„ÇíÊ∞∏Á∂öÂåñ„Åó„Åæ„Åó„Åü');
                  }
                } catch (error) {
                  console.error('üö® „É≠„Ç∞„Ç§„É≥ÊôÇ„É¶„Éº„Ç∂„Éº„Éá„Éº„ÇøË™≠„ÅøÂèñ„Çä„Ç®„É©„Éº:', error);
                }
              } else {
                setIsLoggedIn(false);
              }
            }}
            onRoleChange={(role) => {
              setUserRole(role);
              // ÂΩπÂâ≤Â§âÊõ¥ÊôÇ„Å´currentView„ÇíË®≠ÂÆö
              if (role === 'INSTRUCTOR') {
                updateCurrentView('dashboard');
              } else {
                updateCurrentView('goals');
              }
            }}
            showPaymentSuccess={true}
            selectedPlan={selectedPlan}
          />
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 lg:flex">
      {/* „É¢„Éê„Ç§„É´Áî®„Ç™„Éº„Éê„Éº„É¨„Ç§ */}
      {showMobileMenu && (
        <div
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={() => setShowMobileMenu(false)}
        />
      )}

      {/* „Çµ„Ç§„Éâ„Éê„Éº */}
      <div className={`
        fixed inset-y-0 left-0 w-64 bg-white border-r border-gray-200 z-50 transform transition-transform duration-300 ease-in-out min-h-screen flex flex-col
        ${showMobileMenu ? 'translate-x-0' : '-translate-x-full'}
        lg:translate-x-0 lg:static lg:inset-0 lg:h-screen lg:flex-shrink-0
      `}>
        <div className="p-6">
          <div className="flex items-center relative">
            <SunaLogo width={80} height={40} />
          </div>
          {currentUser && (
            <div className="mt-2 text-sm text-gray-600">
              <p>„Çà„ÅÜ„Åì„Åù„ÄÅ{currentUser.name}„Åï„Çì</p>
              <p className="text-xs">
                {userRole === 'STUDENT' ? 'ÁîüÂæí' : 'Ë¨õÂ∏´'}„Ç¢„Ç´„Ç¶„É≥„Éà
              </p>
            </div>
          )}
        </div>
        <nav className="px-4 flex-1">
          {userRole === 'STUDENT' ? (
            <div>
              <button
                onClick={() => updateCurrentView('planner')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'planner' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                üìÖ ÈÄ±Èñì„Éó„É©„É≥„Éä„Éº
              </button>
              <button
                onClick={() => updateCurrentView('monthly-calendar')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'monthly-calendar' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                üìÜ ÊúàÈñì„Ç´„É¨„É≥„ÉÄ„Éº
              </button>
              <button
                onClick={() => updateCurrentView('study-books')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'study-books' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                üìö ÂèÇËÄÉÊõ∏ÁÆ°ÁêÜ
              </button>
              <button
                onClick={() => updateCurrentView('goals')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'goals' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                üéØ ÁõÆÊ®ôÁÆ°ÁêÜ
              </button>
            </div>
          ) : (
            <div>
              <button
                onClick={() => updateCurrentView('dashboard')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'dashboard' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                üìä Ë¨õÂ∏´„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
              </button>
              <button
                onClick={() => updateCurrentView('students')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'students' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                üë• ÁîüÂæíÁÆ°ÁêÜ
              </button>
              <button
                onClick={() => updateCurrentView('assignments')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'assignments' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                üìù Ë™≤È°åÁÆ°ÁêÜ
              </button>
              <button
                onClick={() => updateCurrentView('analytics')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'analytics' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                üìà ÂàÜÊûê
              </button>
              <button
                onClick={() => updateCurrentView('messages')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'messages' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                üí¨ „É°„ÉÉ„Çª„Éº„Ç∏
              </button>
              <button
                onClick={() => updateCurrentView('invites')}
                className={`w-full text-left px-4 py-2 rounded-md mb-2 ${
                  currentView === 'invites' ? 'bg-blue-50 text-blue-600' : 'hover:bg-gray-100'
                }`}
              >
                ‚úâÔ∏è ÊãõÂæÖÁÆ°ÁêÜ
              </button>
            </div>
          )}
        </nav>
        
        {/* ‰∏ãÈÉ®„ÅÆ„Ç¢„Ç§„Ç≥„É≥„Éú„Çø„É≥ */}
        <div className="border-t border-gray-200 p-4">
          <div className="flex items-center justify-center space-x-4">
            <button
              onClick={() => updateCurrentView('settings')}
              className={`p-2 rounded-lg transition-colors ${
                currentView === 'settings' ? 'bg-gray-200 text-gray-900' : 'text-gray-600 hover:bg-gray-100 hover:text-gray-900'
              }`}
              title="Ë®≠ÂÆö"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
              </svg>
            </button>
            <button
              onClick={async () => {
                try {
                  // API„Åß„É≠„Ç∞„Ç¢„Ç¶„Éà
                  await apiService.logout();
                  
                  // „É≠„Éº„Ç´„É´„Éá„Éº„Çø„Çí„ÇØ„É™„Ç¢
                  localStorage.removeItem('currentUser')
                  localStorage.removeItem('authToken')
                  localStorage.removeItem('allTasksHistory')
                  localStorage.removeItem('paymentStatus')
                  localStorage.removeItem('isPaid')
                  localStorage.removeItem('selectedPlan')
                  localStorage.removeItem('userInfo')
                  localStorage.removeItem('userKnowledge')
                  
                  // Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
                  setIsLoggedIn(false)
                  setCurrentUser(null)
                  setUserRole('STUDENT')
                  updateCurrentView('goals')
                  setGoals([])
                  setTodayTasks([])
                  setScheduledTasks({})
                  setCompletedTasks({})
                  setStudyBooks([])
                  setStudyPlans({})
                  setDailyTaskPool([])
                  setAllTasksHistory({})
                  setUserKnowledge(null)
                  setHasValidSubscription(false)
                  setShowPricing(true)
                  setShowRegistrationFlow(false)
                  setShowLoginScreen(false)
                  
                  console.log('‚úÖ „É≠„Ç∞„Ç¢„Ç¶„ÉàÂÆå‰∫Ü');
                } catch (error) {
                  console.error('Logout error:', error);
                  // „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇ„É≠„Ç∞„Ç¢„Ç¶„Éà„ÇíÁ∂ôÁ∂ö
                  setIsLoggedIn(false)
                  setCurrentUser(null)
                  setHasValidSubscription(false)
                  setShowPricing(true)
                }
              }}
              className="p-2 rounded-lg text-gray-600 hover:bg-red-50 hover:text-red-600 transition-colors"
              title="„É≠„Ç∞„Ç¢„Ç¶„Éà"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
            </button>
          </div>
        </div>
      </div>

      {/* „É°„Ç§„É≥„Ç≥„É≥„ÉÜ„É≥„ÉÑ */}
      <div className="lg:ml-0 lg:flex-1">
        {/* „É¢„Éê„Ç§„É´Áî®„Éò„ÉÉ„ÉÄ„Éº */}
        <div className="lg:hidden bg-white border-b border-gray-200 px-4 py-3 flex items-center justify-between">
          <button
            onClick={() => setShowMobileMenu(true)}
            className="p-2 rounded-md text-gray-600 hover:text-gray-900 hover:bg-gray-100"
          >
            <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 12h16M4 18h16" />
            </svg>
          </button>
          <SunaLogo width={80} height={40} />
          <div className="w-10"></div> {/* „Çπ„Éö„Éº„Çµ„Éº */}
        </div>

        <div className="p-4 lg:p-6 h-full">
          {userRole === 'STUDENT' && currentView === 'planner' && (
          <div>
            <div className="mb-6">
              <h1 className="text-xl sm:text-2xl lg:text-3xl font-bold mb-2">ÈÄ±Èñì„Éó„É©„É≥„Éä„Éº</h1>
              <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
                <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:space-x-4">
                  <span className="text-base sm:text-lg lg:text-xl font-medium text-gray-700">{todayString}</span>
                  <span className="bg-orange-100 text-orange-800 px-3 py-1 lg:px-4 lg:py-2 rounded-full text-sm lg:text-base font-semibold w-fit">
                    üî• {currentStreak}Êó•ÈÄ£Á∂öÔºÅ
                  </span>
                  {(() => {
                    const nextExam = getNextExam()
                    if (nextExam) {
                      const daysRemaining = calculateDaysRemaining(nextExam.date)
                      const getColorClass = (days) => {
                        if (days === 0) return 'bg-red-100 text-red-800'
                        if (days <= 7) return 'bg-red-100 text-red-800'
                        if (days <= 30) return 'bg-orange-100 text-orange-800'
                        return 'bg-blue-100 text-blue-800'
                      }
                      const getText = (days) => {
                        if (days === 0) return '‰ªäÊó•'
                        if (days < 0) return `${Math.abs(days)}Êó•ÁµåÈÅé`
                        return `„ÅÇ„Å®${days}Êó•`
                      }
                      
                      return (
                        <span className={`px-3 py-1 lg:px-4 lg:py-2 rounded-full text-sm lg:text-base font-semibold w-fit ${getColorClass(daysRemaining)}`}>
                          üìÖ {getText(daysRemaining)}„Åß{nextExam.title}
                        </span>
                      )
                    }
                    return null
                  })()}
                </div>
                <div className="flex items-center space-x-1 sm:space-x-2 lg:space-x-3">
                  <button
                    onClick={() => {
                      console.log('üîç Debug - ÂâçÈÄ±„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ:', { weekOffset })
                      setWeekOffset(weekOffset - 1)
                    }}
                    className="px-2 py-1 sm:px-3 lg:px-4 lg:py-2 border rounded hover:bg-gray-100 text-sm sm:text-base"
                  >
                    ‚Üê ÂâçÈÄ±
                  </button>
                  <button
                    onClick={() => {
                      console.log('üîç Debug - ‰ªäÈÄ±„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ:', { weekOffset })
                      setWeekOffset(0)
                    }}
                    className={`px-2 py-1 sm:px-3 lg:px-4 lg:py-2 rounded text-sm sm:text-base ${weekOffset === 0 ? 'bg-blue-500 text-white' : 'border hover:bg-gray-100'}`}
                  >
                    ‰ªäÈÄ±
                  </button>
                  <button
                    onClick={() => {
                      console.log('üîç Debug - Ê¨°ÈÄ±„Éú„Çø„É≥„ÇØ„É™„ÉÉ„ÇØ:', { weekOffset })
                      setWeekOffset(weekOffset + 1)
                    }}
                    className="px-2 py-1 sm:px-3 lg:px-4 lg:py-2 border rounded hover:bg-gray-100 text-sm sm:text-base"
                  >
                    Ê¨°ÈÄ± ‚Üí
                  </button>
                </div>
              </div>
            </div>

            {/* PCÁâà: „Çø„Çπ„ÇØ„Éó„Éº„É´„Å®„Ç´„É¨„É≥„ÉÄ„Éº„ÇíÊ®™‰∏¶„Å≥„Å´ÈÖçÁΩÆ */}
            <div className={`${!isMobile ? 'flex gap-4' : ''}`}>
              {/* PCÁâà: Â∑¶ÂÅ¥„Å´„Çø„Çπ„ÇØ„Éó„Éº„É´ */}
              {!isMobile && (
                <div className="bg-white rounded-lg shadow" style={{ width: '350px', minWidth: '350px' }}>
                  <div className="h-full" style={{ maxHeight: '75vh', overflow: 'hidden' }}>
                    <TaskPoolManager
                      tasks={[...todayTasks, ...dailyTaskPool]}
                      onTaskSelect={(task) => {
                        console.log('„Çø„Çπ„ÇØÈÅ∏Êäû:', task);
                      }}
                      onTaskUpdate={(taskId, updates) => {
                        console.log('„Çø„Çπ„ÇØÊõ¥Êñ∞:', taskId, updates);
                        // „Çø„Çπ„ÇØÊõ¥Êñ∞Âá¶ÁêÜ
                        const updateTaskInList = (taskList) =>
                          taskList.map(task =>
                            task.id === taskId ? { ...task, ...updates } : task
                          );
                        
                        setTodayTasks(updateTaskInList);
                        setDailyTaskPool(updateTaskInList);
                      }}
                      isMobile={false}
                    />
                  </div>
                </div>
              )}
              
              {/* ÈÄ±Èñì„Ç´„É¨„É≥„ÉÄ„Éº */}
              <div className={`bg-white rounded-lg shadow overflow-hidden ${!isMobile ? 'flex-1' : ''}`}>
                <div className="overflow-x-auto overflow-y-auto" style={{
                  height: isMobile ? 'calc(100vh - 200px)' : '600px',
                  maxHeight: isMobile ? 'calc(100vh - 200px)' : '75vh',
                  minHeight: isMobile ? '300px' : '500px'
                }}>
                  <div className={`${isMobile ? 'min-w-[320px]' : 'min-w-[600px]'} relative`}>
                  
                  {/* „Éò„ÉÉ„ÉÄ„ÉºË°å - Âõ∫ÂÆö‰ΩçÁΩÆ */}
                  <div className="sticky top-0 z-10 bg-white border-b grid" style={{gridTemplateColumns: `${isMobile ? '40px' : '60px'} repeat(${dates.length}, 1fr)`}}>
                    <div className="p-1 sm:p-2 text-center text-xs sm:text-sm font-medium bg-gray-50"></div>
                    {dates.map((date, index) => {
                      const isToday = date.toDateString() === new Date().toDateString()
                      const day = date.getDate()
                      return (
                        <div
                          key={index}
                          className={`p-1 sm:p-2 text-center border-l ${isToday ? 'bg-blue-50' : 'bg-gray-50'}`}
                        >
                          <div className="text-xs text-gray-500">
                            {dayNames[date.getDay()]}
                          </div>
                          <div className={`text-sm sm:text-lg font-semibold ${isToday ? 'text-blue-700' : ''}`}>
                            {day}
                          </div>
                        </div>
                      )
                    })}
                  </div>
                  
                  {/* ÁèæÂú®ÊôÇÂàª„Ç§„É≥„Ç∏„Ç±„Éº„Çø„Éº - 24ÊôÇÈñì„Ç∞„É™„ÉÉ„ÉâÂÜÖ„ÅÆÂ†¥Âêà„ÅÆ„ÅøË°®Á§∫ */}
                  {isCurrentTimeInGrid() && (
                    <div
                      className="absolute left-0 right-0 pointer-events-none z-20 grid"
                      style={{
                        top: `${getCurrentTimePosition()}px`,
                        height: '2px',
                        gridTemplateColumns: `${isMobile ? '40px' : '60px'} repeat(${dates.length}, 1fr)`
                      }}
                    >
                      {/* ÊôÇÈñìÂàó„ÅÆ„Çπ„Éö„Éº„Çπ */}
                      <div className="relative">
                        <div className="absolute right-2 -top-3 text-xs font-semibold text-blue-600 bg-white px-1 rounded shadow-sm">
                          {getCurrentTimeString()}
                        </div>
                      </div>
                      
                      {/* ÂêÑÊó•‰ªòÂàó - ÂÖ®„Å¶„ÅÆÂàó„Å´Èùí„ÅÑÁ∑ö„ÇíË°®Á§∫ */}
                      {dates.map((date, dateIndex) => {
                        const isToday = date.toDateString() === new Date().toDateString()
                        return (
                          <div key={dateIndex} className={`relative ${isToday ? 'bg-blue-50' : ''}`}>
                            <div className="absolute inset-0 bg-blue-500 h-0.5 shadow-sm">
                              {/* ÁèæÂú®ÊôÇÂàª„ÅÆÈùí„ÅÑÁ∑ö„Å®„Éâ„ÉÉ„Éà */}
                            </div>
                          </div>
                        )
                      })}
                    </div>
                  )}
                  
                  {[...Array(24)].map((_, hourIndex) => {
                    const hour = hourIndex
                    return (
                      <div key={hour} className={`grid border-b`} style={{gridTemplateColumns: `${isMobile ? '40px' : '60px'} repeat(${dates.length}, 1fr)`}}>
                        <div className={`${isMobile ? 'px-1 py-2 text-xs font-medium' : 'p-2 text-xs'} text-right text-gray-600 bg-gray-50 flex items-center justify-end`}>
                          <span className={isMobile ? 'text-xs leading-none' : ''}>
                            {hour}:00
                          </span>
                        </div>
                        {dates.map((date, dateIndex) => {
                          const dateKey = date.toISOString().split('T')[0]
                          const taskKey = `${dateKey}-${hour}`
                          const scheduledTask = scheduledTasks[taskKey]
                          const isToday = date.toDateString() === new Date().toDateString()
                          
                          // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞
                          if ((hour === 10 || hour === 14) && dateKey === '2025-07-14') {
                            console.log('üîç Debug - „Çø„Çπ„ÇØË°®Á§∫„ÉÅ„Çß„ÉÉ„ÇØ:')
                            console.log('  - dateKey:', dateKey)
                            console.log('  - hour:', hour)
                            console.log('  - taskKey:', taskKey)
                            console.log('  - scheduledTask:', scheduledTask)
                            console.log('  - hasScheduledTask:', !!scheduledTask)
                            console.log('  - scheduledTasksKeys:', Object.keys(scheduledTasks))
                            console.log('  - allScheduledTasks:', scheduledTasks)
                          }
                          
                          // ‰ªñ„ÅÆ„Çø„Çπ„ÇØ„Åå„Åì„ÅÆÊôÇÈñì„Çπ„É≠„ÉÉ„Éà„ÇíÂç†Êúâ„Åó„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
                          const isOccupiedByOtherTask = () => {
                            for (let checkHour = 0; checkHour < hour; checkHour++) {
                              const checkKey = `${dateKey}-${checkHour}`
                              const checkTask = scheduledTasks[checkKey]
                              if (checkTask && checkTask.duration && checkHour + checkTask.duration > hour) {
                                return true
                              }
                            }
                            return false
                          }
                          
                          const isOccupied = isOccupiedByOtherTask()
                          
                          // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞ - isOccupied „ÅÆË©≥Á¥∞
                          if ((hour === 10 || hour === 14) && dateKey === '2025-07-14') {
                            console.log('üîç Debug - isOccupiedË©≥Á¥∞:')
                            console.log('  - dateKey:', dateKey)
                            console.log('  - hour:', hour)
                            console.log('  - taskKey:', taskKey)
                            console.log('  - scheduledTask:', scheduledTask)
                            console.log('  - isOccupied:', isOccupied)
                            console.log('  - shouldShowTask:', !!(scheduledTask && !isOccupied))
                            console.log('  - scheduledTaskExists:', !!scheduledTask)
                            console.log('  - isOccupiedValue:', isOccupied)
                          }
                          
                          return (
                            <div
                              key={dateIndex}
                              className={`relative p-1 border-l ${isMobile ? 'min-h-[50px]' : 'min-h-[120px]'} ${isToday ? 'bg-blue-50' : ''} ${
                                isOccupied ? '' : (
                                  draggingOverCalendar && currentDragTask ?
                                    (isToday ? 'bg-green-100 border-green-300' : 'bg-green-50 border-green-200') :
                                    (isToday ? 'hover:bg-blue-100' : 'hover:bg-gray-50')
                                )
                              } ${isMobile && !isOccupied ? 'cursor-pointer' : ''} ${
                                draggingOverCalendar && currentDragTask && !isOccupied ? 'transition-all duration-200 border-2 border-dashed' : 'border-solid'
                              }`}
                              data-cell-info={JSON.stringify({ dateKey, hour })}
                              onDragOver={!isMobile && !isOccupied ? handleDragOver : undefined}
                              onDragLeave={!isMobile && !isOccupied ? handleDragLeave : undefined}
                              onDrop={!isOccupied ? (e) => handleDrop(e, dateKey, hour) : undefined}
                              onClick={isMobile && !isOccupied ? () => {
                                console.log('üîç Debug - „Çª„É´„ÇØ„É™„ÉÉ„ÇØ:', { dateKey, hour, isMobile, isOccupied })
                                setSelectedCellInfo({ date: dateKey, hour })
                                setShowMobileTaskPopup(true)
                              } : undefined}
                              onTouchEnd={isMobile && !isOccupied ? (e) => {
                                // „Çø„ÉÉ„ÉÅ„Éâ„É≠„ÉÉ„Éó„ÅÆÂá¶ÁêÜ
                                if (window.taskPoolTouch && window.taskPoolTouch.isDragging) {
                                  console.log('üîç Debug - „Çª„É´„Åß„Çø„ÉÉ„ÉÅ„Éâ„É≠„ÉÉ„ÉóÊ§úÂá∫:', { dateKey, hour })
                                  e.preventDefault()
                                  handleDrop(e, dateKey, hour)
                                }
                                if (window.mobileTouch && window.mobileTouch.isDragging) {
                                  console.log('üîç Debug - „Çª„É´„Åß„Çø„Çπ„ÇØÁßªÂãïÊ§úÂá∫:', { dateKey, hour })
                                  e.preventDefault()
                                  handleDrop(e, dateKey, hour)
                                }
                              } : undefined}
                            >
                              {scheduledTask && (
                                <div
                                  className={`absolute ${isMobile ? 'p-1 text-xs' : 'p-2 text-sm'} rounded cursor-pointer z-10 ${
                                    animatingTasks.has(taskKey)
                                      ? 'animate-shrink-to-cell'
                                      : ''
                                  } ${
                                    completedTasks[taskKey]
                                      ? 'bg-gray-300 text-gray-700'
                                      : `${getPriorityColor(scheduledTask.priority)} text-white hover:opacity-90`
                                  } ${
                                    isMobile ? 'shadow-md' : ''
                                  }`}
                                  style={{
                                    height: `${(scheduledTask.duration || 1) * (isMobile ? 50 : 120) - 8}px`,
                                    width: 'calc(100% - 8px)',
                                    left: '4px',
                                    top: '4px',
                                    overflow: 'visible',
                                    minHeight: isMobile ? '42px' : '60px',
                                    display: 'block',
                                    touchAction: 'none'
                                  }}
                                  draggable={!completedTasks[taskKey]}
                                  onDragStart={(e) => {
                                    if (!completedTasks[taskKey]) {
                                      console.log('üîç Debug - PC „Éâ„É©„ÉÉ„Ç∞ÈñãÂßã:', { scheduledTask, taskKey })
                                      
                                      // „Ç´„Çπ„Çø„É†„Éâ„É©„ÉÉ„Ç∞„Ç§„É°„Éº„Ç∏„Çí‰ΩúÊàêÔºà„Çø„Çπ„ÇØ„ÅÆÂΩ¢Áä∂„Çí‰øùÊåÅÔºâ
                                      const dragImage = e.currentTarget.cloneNode(true)
                                      dragImage.style.position = 'absolute'
                                      dragImage.style.top = '-1000px'
                                      dragImage.style.left = '-1000px'
                                      dragImage.style.width = e.currentTarget.offsetWidth + 'px'
                                      dragImage.style.height = e.currentTarget.offsetHeight + 'px'
                                      dragImage.style.transform = 'rotate(3deg)'
                                      dragImage.style.boxShadow = '0 8px 25px rgba(0,0,0,0.3)'
                                      dragImage.style.opacity = '0.9'
                                      dragImage.style.zIndex = '9999'
                                      document.body.appendChild(dragImage)
                                      
                                      e.dataTransfer.setDragImage(dragImage, e.currentTarget.offsetWidth / 2, e.currentTarget.offsetHeight / 2)
                                      
                                      // „Éâ„É©„ÉÉ„Ç∞ÁµÇ‰∫ÜÂæå„Å´„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
                                      setTimeout(() => {
                                        if (dragImage.parentNode) {
                                          dragImage.parentNode.removeChild(dragImage)
                                        }
                                      }, 0)
                                      
                                      // ÂÖÉ„ÅÆ„Çø„Çπ„ÇØ„ÅÆÈÄèÊòéÂ∫¶„ÇíÂ∞ë„Åó‰∏ã„Åí„ÇãÔºàÂÆåÂÖ®„Å´Ê∂à„Åï„Å™„ÅÑÔºâ
                                      e.currentTarget.style.opacity = '0.5'
                                      e.currentTarget.style.transform = 'scale(0.95)'
                                      
                                      handleTaskDragStart(e, scheduledTask)
                                      e.dataTransfer.setData('fromLocation', `scheduled-${taskKey}`)
                                    }
                                  }}
                                  onDragEnd={(e) => {
                                    // „Éâ„É©„ÉÉ„Ç∞ÁµÇ‰∫ÜÊôÇ„Å´ÂÖÉ„ÅÆÁä∂ÊÖã„Å´Êàª„Åô
                                    e.currentTarget.style.opacity = '1'
                                    e.currentTarget.style.transform = 'scale(1)'
                                  }}
                                  onClick={(e) => {
                                    // „ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÇÑ„É™„Çµ„Ç§„Ç∫„Éè„É≥„Éâ„É´„ÅÆ„ÇØ„É™„ÉÉ„ÇØ„Åß„Å™„ÅÑÂ†¥Âêà
                                    if (!e.target.closest('input') && !e.target.closest('.resize-handle')) {
                                      if (isMobile) {
                                        // „É¢„Éê„Ç§„É´: „Çø„Çπ„ÇØ„Éó„Éº„É´„ÇíÈñã„Åè
                                        console.log('üîç Debug - „Çø„Çπ„ÇØ„ÇØ„É™„ÉÉ„ÇØÔºà„É¢„Éê„Ç§„É´Ôºâ:', { taskKey, scheduledTask })
                                        const [dateKey, hour] = taskKey.split('-')
                                        setSelectedCellInfo({ date: dateKey, hour: parseInt(hour) })
                                        setShowMobileTaskPopup(true)
                                      } else {
                                        // PC: „ÉÄ„Éñ„É´„ÇØ„É™„ÉÉ„ÇØÁ¢∫Ë™ç„Åß„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´Êàª„Åô
                                        handleTaskClick(scheduledTask, taskKey)
                                      }
                                    }
                                  }}
                                  // „Çø„ÉÉ„ÉÅ„Ç§„Éô„É≥„Éà„Å®„Éû„Ç¶„Çπ„Ç§„Éô„É≥„Éà„ÅÆÁµ±ÂêàÂá¶ÁêÜ
                                  onMouseDown={!completedTasks[taskKey] ? (e) => {
                                    // „É™„Çµ„Ç§„Ç∫„Éè„É≥„Éâ„É´„ÇÑ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÅÆÂ†¥Âêà„ÅØÈô§Â§ñ
                                    if (e.target.closest('input') || e.target.closest('.resize-handle')) {
                                      return;
                                    }
                                    
                                    e.preventDefault();
                                    const coords = getEventCoordinates(e);
                                    const elem = e.currentTarget;
                                    
                                    console.log('üîç Debug - „Éâ„É©„ÉÉ„Ç∞ÈñãÂßã:', { taskKey, scheduledTask, coords });
                                    
                                    // „Éâ„É©„ÉÉ„Ç∞ÈñãÂßãÊôÇ„ÅÆË¶ÅÁ¥†„ÅÆ„Çµ„Ç§„Ç∫„ÇíÂèñÂæó
                                    const originalWidth = elem.offsetWidth;
                                    const originalHeight = elem.offsetHeight;
                                    
                                    console.log('üîç Debug - „Éâ„É©„ÉÉ„Ç∞ÈñãÂßãÊôÇ„ÅÆ„Çµ„Ç§„Ç∫:', { originalWidth, originalHeight });
                                    
                                    // „Éâ„É©„ÉÉ„Ç∞ÈñãÂßãÂá¶ÁêÜ
                                    setCurrentDragTask(scheduledTask);
                                    setDraggingTaskId(`scheduled-${taskKey}`);
                                    setDraggingOverCalendar(true);
                                    
                                    // „Éâ„É©„ÉÉ„Ç∞‰∏≠„ÅÆÂá¶ÁêÜ„ÇíË®≠ÂÆö
                                    startDrag(elem, {
                                      zIndex: 9999,
                                      opacity: 0.8,
                                      onMove: (moveCoords, moveEvent) => {
                                        // „Çø„Çπ„ÇØ„ÇíÊåá„Å´ËøΩÂæì„Åï„Åõ„Çã
                                        elem.style.position = 'fixed';
                                        elem.style.width = `${originalWidth}px`;  // ÂÖÉ„ÅÆÂπÖ„ÇíÁ∂≠ÊåÅ
                                        elem.style.height = `${originalHeight}px`; // ÂÖÉ„ÅÆÈ´ò„Åï„ÇíÁ∂≠ÊåÅ
                                        elem.style.left = `${moveCoords.x - originalWidth / 2}px`;
                                        elem.style.top = `${moveCoords.y - originalHeight / 2}px`;
                                        
                                        // „Éâ„É≠„ÉÉ„ÉóÂèØËÉΩ„Å™Â†¥ÊâÄ„Çí„Éè„Ç§„É©„Ç§„Éà
                                        elem.style.pointerEvents = 'none';
                                        const elementBelow = document.elementFromPoint(moveCoords.x, moveCoords.y);
                                        elem.style.pointerEvents = 'auto';
                                        
                                        const cell = elementBelow?.closest('[data-cell-info]');
                                        
                                        // „Éè„Ç§„É©„Ç§„ÉàË°®Á§∫„ÇíÂâäÈô§Ôºà„Ç∑„É≥„Éó„É´„Å™„Ç§„É≥„Çø„Éº„Éï„Çß„Éº„Çπ„ÅÆ„Åü„ÇÅÔºâ
                                      },
                                      onEnd: (endCoords, endEvent) => {
                                        console.log('üîç Debug - „Éâ„É©„ÉÉ„Ç∞ÁµÇ‰∫Ü:', { endCoords });
                                        
                                        // „Éâ„É≠„ÉÉ„ÉóÂá¶ÁêÜ
                                        elem.style.pointerEvents = 'none';
                                        const elementBelow = document.elementFromPoint(endCoords.x, endCoords.y);
                                        elem.style.pointerEvents = 'auto';
                                        
                                        const cell = elementBelow?.closest('[data-cell-info]');
                                        
                                        if (cell) {
                                          const cellInfo = JSON.parse(cell.getAttribute('data-cell-info'));
                                          const newTaskKey = `${cellInfo.dateKey}-${cellInfo.hour}`;
                                          
                                          // Áï∞„Å™„Çã‰ΩçÁΩÆ„Åã„Å§Á©∫„ÅÑ„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅÆ„ÅøÁßªÂãï
                                          if (newTaskKey !== taskKey && !scheduledTasks[newTaskKey]) {
                                            setScheduledTasks(prev => {
                                              const newTasks = { ...prev };
                                              delete newTasks[taskKey];
                                              newTasks[newTaskKey] = {
                                                ...scheduledTask,
                                                id: scheduledTask.id
                                              };
                                              return newTasks;
                                            });
                                            
                                            // „Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥ÔºàÊàêÂäüÔºâ
                                            if (navigator.vibrate) {
                                              navigator.vibrate(50);
                                            }
                                          }
                                        }
                                        
                                        // Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
                                        setCurrentDragTask(null);
                                        setDraggingTaskId(null);
                                        setDraggingOverCalendar(false);
                                        
                                        // „Çπ„Çø„Ç§„É´„Çí„É™„Çª„ÉÉ„Éà
                                        elem.style.position = '';
                                        elem.style.width = '';
                                        elem.style.height = '';
                                        elem.style.left = '';
                                        elem.style.top = '';
                                        
                                        // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÂá¶ÁêÜ„ÅÆ„Åø
                                      }
                                    });
                                  } : undefined}
                                  onTouchStart={!completedTasks[taskKey] ? (e) => {
                                    // „É™„Çµ„Ç§„Ç∫„Éè„É≥„Éâ„É´„ÇÑ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„Çπ„ÅÆÂ†¥Âêà„ÅØÈô§Â§ñ
                                    if (e.target.closest('input') || e.target.closest('.resize-handle')) {
                                      return;
                                    }
                                    
                                    // „Éû„Ç¶„Çπ„ÉÄ„Ç¶„É≥„Ç§„Éô„É≥„Éà„Çí„Éà„É™„Ç¨„ÉºÔºàÂÖ±ÈÄöÂá¶ÁêÜ„Çí‰ΩøÁî®Ôºâ
                                    const mouseDownEvent = new MouseEvent('mousedown', {
                                      bubbles: true,
                                      cancelable: true,
                                      clientX: e.touches[0].clientX,
                                      clientY: e.touches[0].clientY
                                    });
                                    e.currentTarget.dispatchEvent(mouseDownEvent);
                                  } : undefined}
                                  onTouchMove={isMobile && !completedTasks[taskKey] ? (e) => {
                                    if (!e.touches[0] || !window.mobileTouch) return
                                    
                                    const touch = e.touches[0]
                                    window.mobileTouch.currentX = touch.clientX
                                    window.mobileTouch.currentY = touch.clientY
                                    
                                    const deltaX = Math.abs(touch.clientX - window.mobileTouch.startX)
                                    const deltaY = Math.abs(touch.clientY - window.mobileTouch.startY)
                                    
                                    // ÁßªÂãïË∑ùÈõ¢„Åå10px‰ª•‰∏ä„ÅÆÂ†¥Âêà„ÄÅÁßªÂãï„Éï„É©„Ç∞„ÇíË®≠ÂÆö
                                    if (deltaX > 10 || deltaY > 10) {
                                      window.mobileTouch.hasMoved = true
                                      
                                      // Èï∑Êäº„Åó„Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
                                      if (window.mobileTouch.longPressTimer && !window.mobileTouch.isDragging) {
                                        clearTimeout(window.mobileTouch.longPressTimer)
                                        window.mobileTouch.longPressTimer = null
                                      }
                                    }
                                    
                                    // „Éâ„É©„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅÆÂ†¥Âêà
                                    if (window.mobileTouch.isDragging && currentDragTask) {
                                      e.preventDefault()
                                      
                                      // „Çø„Çπ„ÇØ„ÇíÊåá„Å´ËøΩÂæì„Åï„Åõ„Çã
                                      const elem = window.mobileTouch.element
                                      elem.style.left = `${touch.clientX - elem.offsetWidth / 2}px`
                                      elem.style.top = `${touch.clientY - elem.offsetHeight / 2}px`
                                      
                                      // „Çø„ÉÉ„ÉÅ‰ΩçÁΩÆ„ÅÆË¶ÅÁ¥†„ÇíÂèñÂæó
                                      elem.style.pointerEvents = 'none'
                                      const elementBelow = document.elementFromPoint(touch.clientX, touch.clientY)
                                      elem.style.pointerEvents = 'auto'
                                      
                                      const cell = elementBelow?.closest('[data-cell-info]')
                                      
                                      // ÂÖ®„Å¶„ÅÆ„Çª„É´„ÅÆ„Éè„Ç§„É©„Ç§„Éà„ÇíÂâäÈô§
                                      document.querySelectorAll('[data-cell-info]').forEach(c => {
                                        c.classList.remove('bg-green-100', 'bg-red-100', 'border-2', 'border-green-400', 'border-red-400')
                                      })
                                      
                                      // ÁèæÂú®„ÅÆ„Çª„É´„ÇíÂº∑Ë™øË°®Á§∫
                                      if (cell) {
                                        const cellInfo = JSON.parse(cell.getAttribute('data-cell-info'))
                                        const targetKey = `${cellInfo.dateKey}-${cellInfo.hour}`
                                        
                                        // Êó¢Â≠ò„ÅÆ„Çø„Çπ„ÇØ„Åå„Å™„ÅÑÂ†¥Âêà„ÅÆ„Åø„Éè„Ç§„É©„Ç§„Éà
                                        if (!scheduledTasks[targetKey]) {
                                          cell.classList.add('bg-green-100', 'border-2', 'border-green-400')
                                        } else {
                                          cell.classList.add('bg-red-100', 'border-2', 'border-red-400')
                                        }
                                      }
                                    }
                                  } : undefined}
                                  onTouchEnd={isMobile && !completedTasks[taskKey] ? (e) => {
                                    if (!window.mobileTouch) return
                                    
                                    // Èï∑Êäº„Åó„Çø„Ç§„Éû„Éº„Çí„ÇØ„É™„Ç¢
                                    if (window.mobileTouch.longPressTimer) {
                                      clearTimeout(window.mobileTouch.longPressTimer)
                                      window.mobileTouch.longPressTimer = null
                                    }
                                    
                                    const elem = window.mobileTouch.element
                                    const touchDuration = Date.now() - window.mobileTouch.startTime
                                    const hasMoved = window.mobileTouch.hasMoved
                                    const isDragging = window.mobileTouch.isDragging
                                    
                                    console.log('üîç Debug - „É¢„Éê„Ç§„É´ „Çø„Çπ„ÇØ„Çø„ÉÉ„ÉÅÁµÇ‰∫Ü:', {
                                      taskKey,
                                      touchDuration,
                                      hasMoved,
                                      isDragging
                                    })
                                    
                                    // „Éâ„É©„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„Çø„Çπ„ÇØÁßªÂãïÂá¶ÁêÜ
                                    if (isDragging && currentDragTask) {
                                      console.log('üîç Debug - „É¢„Éê„Ç§„É´ „Éâ„É©„ÉÉ„Ç∞ÁµÇ‰∫Ü„ÄÅ„Çø„Çπ„ÇØÁßªÂãïÂá¶ÁêÜÈñãÂßã')
                                      
                                      // „Çø„ÉÉ„ÉÅÁµÇ‰∫Ü‰ΩçÁΩÆ„ÅÆË¶ÅÁ¥†„ÇíÂèñÂæó
                                      elem.style.pointerEvents = 'none'
                                      const elementBelow = document.elementFromPoint(
                                        window.mobileTouch.currentX,
                                        window.mobileTouch.currentY
                                      )
                                      elem.style.pointerEvents = 'auto'
                                      
                                      const cell = elementBelow?.closest('[data-cell-info]')
                                      
                                      if (cell) {
                                        const cellInfo = JSON.parse(cell.getAttribute('data-cell-info'))
                                        const newTaskKey = `${cellInfo.dateKey}-${cellInfo.hour}`
                                        
                                        console.log('üîç Debug - „É¢„Éê„Ç§„É´ „Çø„Çπ„ÇØÁßªÂãï:', {
                                          from: taskKey,
                                          to: newTaskKey
                                        })
                                        
                                        // Áï∞„Å™„Çã‰ΩçÁΩÆ„Åã„Å§Á©∫„ÅÑ„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅÆ„ÅøÁßªÂãï
                                        if (newTaskKey !== taskKey && !scheduledTasks[newTaskKey]) {
                                          setScheduledTasks(prev => {
                                            const newTasks = { ...prev }
                                            delete newTasks[taskKey]
                                            newTasks[newTaskKey] = {
                                              ...scheduledTask,
                                              id: scheduledTask.id
                                            }
                                            return newTasks
                                          })
                                          
                                          // „Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥ÔºàÊàêÂäüÔºâ
                                          if (navigator.vibrate) {
                                            navigator.vibrate(50)
                                          }
                                        }
                                      }
                                      
                                      // „Éâ„É©„ÉÉ„Ç∞Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
                                      setCurrentDragTask(null)
                                      setDraggingTaskId(null)
                                      setDraggingOverCalendar(false)
                                      
                                      // ÂÖ®„Å¶„ÅÆ„Éè„Ç§„É©„Ç§„Éà„ÇíÂâäÈô§
                                      document.querySelectorAll('[data-cell-info]').forEach(c => {
                                        c.classList.remove('bg-green-100', 'bg-red-100', 'border-2', 'border-green-400', 'border-red-400')
                                      })
                                    }
                                    
                                    // „Çπ„Çø„Ç§„É´„Çí„É™„Çª„ÉÉ„Éà
                                    elem.style.position = ''
                                    elem.style.left = ''
                                    elem.style.top = ''
                                    elem.style.opacity = '1'
                                    elem.style.zIndex = '10'
                                    elem.style.transform = ''
                                    elem.style.boxShadow = ''
                                    elem.style.pointerEvents = ''
                                    elem.style.transition = ''
                                    
                                    // Áü≠„ÅÑ„Çø„ÉÉ„ÉóÔºà300msÊú™Ê∫Ä„Åã„Å§ÁßªÂãï„Å™„ÅóÔºâ„ÅÆÂ†¥Âêà„ÅØ„Çø„Çπ„ÇØ„Éó„Éº„É´Ë°®Á§∫
                                    if (touchDuration < 300 && !hasMoved && !isDragging) {
                                      console.log('üîç Debug - „É¢„Éê„Ç§„É´ Áü≠„ÅÑ„Çø„ÉÉ„ÉóÊ§úÂá∫„ÄÅ„Çø„Çπ„ÇØ„Éó„Éº„É´Ë°®Á§∫')
                                      const [dateKey, hour] = taskKey.split('-')
                                      setSelectedCellInfo({ date: dateKey, hour: parseInt(hour) })
                                      setShowMobileTaskPopup(true)
                                    }
                                    
                                    // „Ç∞„É≠„Éº„Éê„É´Áä∂ÊÖã„Çí„É™„Çª„ÉÉ„Éà
                                    window.mobileTouch = null
                                  } : undefined}
                                >
                                  <div className={`flex ${isMobile ? 'flex-col space-y-1' : 'items-start space-x-1'}`}>
                                    <div className={`flex items-start ${isMobile ? 'space-x-1' : 'space-x-1'}`}>
                                      <input
                                        type="checkbox"
                                        checked={completedTasks[taskKey] || false}
                                        onChange={() => toggleTaskComplete(scheduledTask.id, `scheduled-${taskKey}`)}
                                        className={`${isMobile ? 'mt-0.5 scale-75' : 'mt-0.5'} cursor-pointer flex-shrink-0`}
                                        onClick={(e) => e.stopPropagation()}
                                      />
                                      <div className="flex-1 min-w-0">
                                        <div className={`font-medium ${completedTasks[taskKey] ? 'line-through' : ''} ${isMobile ? 'text-xs leading-tight' : 'text-sm'} break-words`}>
                                          {scheduledTask.title}
                                        </div>
                                        {isMobile && (
                                          <div className="text-[10px] opacity-60 mt-0.5">
                                            {hour}:00-{hour + (scheduledTask.duration || 1)}:00
                                          </div>
                                        )}
                                      </div>
                                    </div>
                                    {!isMobile && (
                                      <div className="text-xs opacity-75 mt-1">
                                        {hour}:00 - {hour + (scheduledTask.duration || 1)}:00
                                      </div>
                                    )}
                                  </div>
                                  
                                  {/* ÊîπÂñÑ„Åï„Çå„Åü„É™„Çµ„Ç§„Ç∫„Éè„É≥„Éâ„É´ - PC/„É¢„Éê„Ç§„É´ÂØæÂøú */}
                                  <div
                                    className={`resize-handle absolute bottom-0 left-0 right-0 ${isMobile ? 'h-6' : 'h-4'} cursor-ns-resize hover:bg-white hover:bg-opacity-40 transition-all duration-200 flex items-center justify-center group`}
                                    style={{
                                      background: 'linear-gradient(to bottom, transparent 0%, rgba(255,255,255,0.3) 50%, rgba(255,255,255,0.6) 100%)',
                                      borderRadius: '0 0 4px 4px'
                                    }}
                                    onMouseDown={(e) => {
                                      e.preventDefault();
                                      e.stopPropagation();
                                      
                                      const coords = getEventCoordinates(e);
                                      const startY = coords.y;
                                      const startDuration = scheduledTask.duration || 1;
                                      const elem = e.currentTarget;
                                      const taskElem = e.currentTarget.parentElement;
                                      
                                      console.log('üîç Debug - „É™„Çµ„Ç§„Ç∫ÈñãÂßã:', { taskKey, startY, startDuration });
                                      
                                      // „É™„Çµ„Ç§„Ç∫‰∏≠„ÅÆË¶ñË¶öÁöÑ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
                                      elem.style.background = 'rgba(59, 130, 246, 0.8)';
                                      
                                      // „É™„Çµ„Ç§„Ç∫Âá¶ÁêÜ„ÇíË®≠ÂÆö
                                      startDrag(taskElem, {
                                        zIndex: 1000,
                                        opacity: 1,
                                        cursor: 'ns-resize',
                                        onMove: (moveCoords, moveEvent) => {
                                          const deltaY = moveCoords.y - startY;
                                          const cellHeight = isMobile ? 50 : 120;
                                          const hourChange = Math.round(deltaY / cellHeight);
                                          const newDuration = Math.max(1, Math.min(12, startDuration + hourChange));
                                          
                                          console.log('üîç Debug - „É™„Çµ„Ç§„Ç∫‰∏≠:', { deltaY, hourChange, newDuration });
                                          
                                          setScheduledTasks(prev => ({
                                            ...prev,
                                            [taskKey]: {
                                              ...scheduledTask,
                                              duration: newDuration
                                            }
                                          }));
                                        },
                                        onEnd: (endCoords, endEvent) => {
                                          console.log('üîç Debug - „É™„Çµ„Ç§„Ç∫ÁµÇ‰∫Ü');
                                          
                                          // ÂÖÉ„ÅÆ„Çπ„Çø„Ç§„É´„Å´Êàª„Åô
                                          elem.style.background = 'linear-gradient(to bottom, transparent 0%, rgba(255,255,255,0.3) 50%, rgba(255,255,255,0.6) 100%)';
                                          
                                          // „Éê„Ç§„Éñ„É¨„Éº„Ç∑„Éß„É≥
                                          if (navigator.vibrate) {
                                            navigator.vibrate(50);
                                          }
                                        }
                                      });
                                    }}
                                    onTouchStart={(e) => {
                                      // „Éû„Ç¶„Çπ„ÉÄ„Ç¶„É≥„Ç§„Éô„É≥„Éà„Çí„Éà„É™„Ç¨„ÉºÔºàÂÖ±ÈÄöÂá¶ÁêÜ„Çí‰ΩøÁî®Ôºâ
                                      const mouseDownEvent = new MouseEvent('mousedown', {
                                        bubbles: true,
                                        cancelable: true,
                                        clientX: e.touches[0].clientX,
                                        clientY: e.touches[0].clientY
                                      });
                                      e.currentTarget.dispatchEvent(mouseDownEvent);
                                    }}
                                  >
                                    <div className="w-full h-full flex items-center justify-center">
                                      {isMobile ? (
                                        <div className="flex flex-col items-center space-y-0.5">
                                          <div className="flex space-x-1">
                                            <div className="w-1 h-0.5 bg-white rounded-full opacity-80"></div>
                                            <div className="w-1 h-0.5 bg-white rounded-full opacity-80"></div>
                                            <div className="w-1 h-0.5 bg-white rounded-full opacity-80"></div>
                                            <div className="w-1 h-0.5 bg-white rounded-full opacity-80"></div>
                                          </div>
                                          <div className="text-xs text-white opacity-70 font-medium">‚áÖ</div>
                                        </div>
                                      ) : (
                                        <div className="flex space-x-1 group-hover:space-x-1.5 transition-all duration-200">
                                          <div className="w-1 h-1 bg-white rounded-full opacity-70 group-hover:opacity-90"></div>
                                          <div className="w-1 h-1 bg-white rounded-full opacity-70 group-hover:opacity-90"></div>
                                          <div className="w-1 h-1 bg-white rounded-full opacity-70 group-hover:opacity-90"></div>
                                        </div>
                                      )}
                                    </div>
                                  </div>
                                </div>
                              )}
                            </div>
                          )
                        })}
                      </div>
                    )
                  })}
                  </div>
                </div>
              </div>

            </div>
          </div>
          )}

        {userRole === 'STUDENT' && currentView === 'monthly-calendar' && (
          <CalendarWithSchedule
            studyBooks={studyBooks}
            studyPlans={studyPlans}
            onDateClick={handleDateClick}
            selectedDate={selectedDate}
            dailyTaskPool={dailyTaskPool}
            onTasksUpdate={setDailyTaskPool}
            onTaskDragStart={handleTaskDragStart}
            overdueTasks={getOverdueTasks()}
            scheduledTasks={scheduledTasks}
            completedTasks={completedTasks}
            onDragOver={handleDragOver}
            onDrop={handleDrop}
            onTaskComplete={toggleTaskComplete}
            onDragStart={handleDragStart}
          />
        )}

        {userRole === 'STUDENT' && currentView === 'study-books' && (
          <div>
            <StudyBookManager
              studyBooks={studyBooks}
              onBooksUpdate={(updatedBooks) => {
                setStudyBooks(updatedBooks)
                // ÂèÇËÄÉÊõ∏„ÅåÊõ¥Êñ∞„Åï„Çå„Åü„ÇâÂ≠¶ÁøíË®àÁîª„ÇÇËá™ÂãïÊõ¥Êñ∞
                if (updatedBooks.length > 0) {
                  const newStudyPlans = generateStudyPlan(updatedBooks, new Date())
                  setStudyPlans(newStudyPlans)
                }
              }}
              onGenerateStudyPlan={handleGenerateStudyPlan}
            />
          </div>
        )}

        {userRole === 'STUDENT' && currentView === 'goals' && (
          <div className="max-w-6xl mx-auto">
            <div className="flex justify-between items-center mb-6">
              <div className="flex items-center space-x-4">
                <h1 className="text-3xl font-bold text-gray-900">ÁõÆÊ®ôÁÆ°ÁêÜ</h1>
                <button
                  onClick={() => updateCurrentView('ai-assistant')}
                  className="px-3 py-2 text-sm bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors flex items-center space-x-2"
                >
                  <span>ü§ñ</span>
                  <span>Suna</span>
                </button>
              </div>
              <button
                onClick={() => setShowGoalModal(true)}
                className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              >
                + Êñ∞„Åó„ÅÑÁõÆÊ®ô„ÇíËøΩÂä†
              </button>
            </div>

            {/* ÂèóÈ®ìÊó•Ë®≠ÂÆö„Çª„ÇØ„Ç∑„Éß„É≥ */}
            <ExamDateSettings
              onExamDateChange={(examData) => {
                console.log('ÂèóÈ®ìÊó•„ÅåËøΩÂä†„Åï„Çå„Åæ„Åó„Åü:', examData);
                // App.jsx„ÅÆexamDates„Çπ„ÉÜ„Éº„Éà„ÇíÊõ¥Êñ∞
                setExamDates(prevExams => {
                  const updatedExams = [...prevExams, examData];
                  localStorage.setItem('examDates', JSON.stringify(updatedExams));
                  
                  // „ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà: ÂèóÈ®ìÊó•Ë®≠ÂÆö
                  sessionService.recordCheckpoint(sessionService.CHECKPOINTS.EXAM_DATE_SET, {
                    examId: examData.id,
                    examTitle: examData.title,
                    examDate: examData.date,
                    userId: currentUser?.id,
                    timestamp: new Date().toISOString()
                  });
                  
                  return updatedExams;
                });
              }}
            />

            {/* AIÂ≠¶Áøí„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß‰ΩúÊàê„Åï„Çå„ÅüÁõÆÊ®ô */}
            {userKnowledge && (
              <div className="mb-8">
                <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                  <span className="mr-2">ü§ñ</span>
                  AIÂ≠¶Áøí„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß‰ΩúÊàê„Åï„Çå„ÅüÁõÆÊ®ô
                </h2>
                <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                  <div className="bg-white rounded-lg shadow-md border border-gray-200 p-6">
                    <div className="flex items-start justify-between mb-4">
                      <h3 className="text-lg font-semibold text-gray-900">{userKnowledge.user_profile?.goal?.name || 'AIÁõÆÊ®ô'}</h3>
                      <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                        AI‰ΩúÊàê
                      </span>
                    </div>
                    
                    <div className="space-y-3">
                      <div>
                        <p className="text-sm text-gray-600">ÁõÆÊ®ôÊúüÈôê</p>
                        <p className="font-medium">{userKnowledge.user_profile?.goal?.deadline || 'Êú™Ë®≠ÂÆö'}</p>
                      </div>
                      
                      <div>
                        <p className="text-sm text-gray-600">ÁèæÂú®„ÅÆ„É¨„Éô„É´</p>
                        <p className="font-medium">{userKnowledge.user_profile?.current_status?.type}: {userKnowledge.user_profile?.current_status?.value}</p>
                      </div>
                      
                      <div>
                        <p className="text-sm text-gray-600">Â≠¶ÁøíÊôÇÈñìË®≠ÂÆö</p>
                        <p className="text-sm">Âπ≥Êó•: {userKnowledge.user_profile?.preferences?.study_hours?.weekday}</p>
                        <p className="text-sm">‰ºëÊó•: {userKnowledge.user_profile?.preferences?.study_hours?.holiday}</p>
                      </div>
                      
                      <div>
                        <div className="flex justify-between items-center mb-2">
                          <p className="text-sm text-gray-600">ÈÄ≤ÊçóÁä∂Ê≥Å</p>
                          <p className="text-sm font-medium">0%</p>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div
                            className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                            style={{ width: '0%' }}
                          ></div>
                        </div>
                      </div>
                      
                      {userKnowledge.materials && userKnowledge.materials.length > 0 && (
                        <div>
                          <p className="text-sm text-gray-600 mb-2">Â≠¶ÁøíÊïôÊùê</p>
                          <div className="space-y-1">
                            {userKnowledge.materials.map((material, index) => (
                              <div key={index} className="text-xs bg-gray-50 p-2 rounded">
                                <p className="font-medium">{material.name}</p>
                                <p className="text-gray-600">
                                  {material.current_progress}/{material.total_amount} {material.type}
                                </p>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* ÊâãÂãï„Åß‰ΩúÊàê„Åï„Çå„ÅüÁõÆÊ®ô */}
            <div className="mb-8">
              <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
                <span className="mr-2">üìù</span>
                ÊâãÂãï„Åß‰ΩúÊàê„Åï„Çå„ÅüÁõÆÊ®ô
              </h2>
              {goals.length > 0 ? (
                <div className="space-y-4">
                  {goals.map((goal) => (
                    <div key={goal.id} className="bg-white rounded-lg shadow-md border border-gray-200 p-6">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-center space-x-4">
                          <h3 className="text-lg font-semibold text-gray-900">{goal.title}</h3>
                          <div className="flex space-x-2">
                            <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full">
                              ÊâãÂãï‰ΩúÊàê
                            </span>
                            {goal.goalType === 'book' && (
                              <span className="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">
                                üìö ÂèÇËÄÉÊõ∏ÁõÆÊ®ô
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                      
                      <div className="space-y-3">
                        {goal.description && (
                          <div>
                            <p className="text-sm text-gray-600 mb-1">Ë™¨Êòé</p>
                            <p className="text-sm">{goal.description}</p>
                          </div>
                        )}
                        
                        {goal.goalType === 'book' ? (
                          <>
                            <div>
                              <p className="text-sm text-gray-600 mb-1">Á∑è„Éö„Éº„Ç∏Êï∞</p>
                              <p className="font-medium">{goal.totalPages} „Éö„Éº„Ç∏</p>
                            </div>
                            
                            {goal.dailyPages && (
                              <div>
                                <p className="text-sm text-gray-600 mb-1">1Êó•„ÅÇ„Åü„Çä„ÅÆ„Éö„Éº„Ç∏Êï∞</p>
                                <p className="font-medium">{goal.dailyPages} „Éö„Éº„Ç∏/Êó•</p>
                              </div>
                            )}
                            
                            {goal.excludeDays && goal.excludeDays.length > 0 && (
                              <div>
                                <p className="text-sm text-gray-600 mb-1">Èô§Â§ñÊõúÊó•</p>
                                <p className="text-sm">
                                  {goal.excludeDays.map(day => ['Êó•', 'Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë', 'Âúü'][day]).join('„ÄÅ')}ÊõúÊó•
                                </p>
                              </div>
                            )}
                          </>
                        ) : (
                          <div>
                            <p className="text-sm text-gray-600 mb-1">ÁõÆÊ®ô</p>
                            <p className="font-medium">
                              {goal.targetValue} {goal.unit} ({goal.aggregationMethod})
                            </p>
                          </div>
                        )}
                        
                        <div>
                          <p className="text-sm text-gray-600 mb-1">ÊúüÈñì</p>
                          <p className="font-medium">
                            {goal.startDate} „Äú {goal.endDate || goal.deadline}
                          </p>
                        </div>
                        
                        <div>
                          <p className="text-sm text-gray-600 mb-1">ÈÄ≤ÊçóÁä∂Ê≥Å</p>
                          <div className="flex items-center justify-between mb-2">
                            <div className="flex-1 bg-gray-200 rounded-full h-2 mr-3">
                              <div
                                className="bg-blue-500 h-2 rounded-full transition-all duration-300"
                                style={{ width: `${goal.progress || 0}%` }}
                              ></div>
                            </div>
                            <span className="text-sm font-medium">{goal.progress || 0}%</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="bg-gray-50 rounded-lg p-8 text-center">
                  <p className="text-gray-600">ÊâãÂãï„Åß‰ΩúÊàê„Åï„Çå„ÅüÁõÆÊ®ô„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì</p>
                  <p className="text-sm text-gray-500 mt-2">„ÄåÊñ∞„Åó„ÅÑÁõÆÊ®ô„ÇíËøΩÂä†„Äç„Éú„Çø„É≥„Åã„ÇâÁõÆÊ®ô„Çí‰ΩúÊàê„Åß„Åç„Åæ„Åô</p>
                </div>
              )}
            </div>
          </div>
        )}

        {userRole === 'STUDENT' && currentView === 'ai-assistant' && (
          <div>
            <div className="mb-6">
              <h1 className="text-2xl font-bold mb-2">AIÂ≠¶Áøí„Ç¢„Ç∑„Çπ„Çø„É≥„Éà</h1>
              <p className="text-gray-600">AI„Åå„ÅÇ„Å™„Åü„ÅÆÂ≠¶Áøí„Çí„Çµ„Éù„Éº„Éà„Åó„Åæ„Åô</p>
            </div>
            
            {currentAIMode === 'select' && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div
                  className="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-lg transition-shadow border-2 border-transparent hover:border-blue-200"
                  onClick={() => setCurrentAIMode('personalize')}
                >
                  <div className="flex items-center mb-4">
                    <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mr-4">
                      <span className="text-2xl">üéØ</span>
                    </div>
                    <h3 className="text-xl font-semibold">„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫„É¢„Éº„Éâ</h3>
                  </div>
                  <p className="text-gray-600 mb-4">
                    „ÅÇ„Å™„Åü„ÅÆÂ≠¶Áøí„Çπ„Çø„Ç§„É´„ÇÑÁõÆÊ®ô„Å´Âêà„Çè„Åõ„Å¶„ÄÅÊúÄÈÅ©„Å™Â≠¶ÁøíË®àÁîª„ÇíÊèêÊ°à„Åó„Åæ„Åô„ÄÇ
                  </p>
                  <div className="text-sm text-blue-600 font-medium">
                    ‚Üí Â≠¶ÁøíË®àÁîª„ÅÆÊúÄÈÅ©Âåñ
                  </div>
                </div>

                <div
                  className="bg-white rounded-lg shadow p-6 cursor-pointer hover:shadow-lg transition-shadow border-2 border-transparent hover:border-green-200"
                  onClick={() => setCurrentAIMode('companion')}
                >
                  <div className="flex items-center mb-4">
                    <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center mr-4">
                      <span className="text-2xl">ü§ù</span>
                    </div>
                    <h3 className="text-xl font-semibold">„Ç≥„É≥„Éë„Éã„Ç™„É≥„É¢„Éº„Éâ</h3>
                  </div>
                  <p className="text-gray-600 mb-4">
                    Â≠¶Áøí‰∏≠„ÅÆË≥™Âïè„ÇÑÊÇ©„Åø„Å´Á≠î„Åà„ÄÅ„É¢„ÉÅ„Éô„Éº„Ç∑„Éß„É≥„ÇíÁ∂≠ÊåÅ„Åô„Çã„Çµ„Éù„Éº„Éà„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ
                  </p>
                  <div className="text-sm text-green-600 font-medium">
                    ‚Üí Â≠¶Áøí„Çµ„Éù„Éº„Éà„ÉªË≥™ÂïèÂØæÂøú
                  </div>
                </div>
              </div>
            )}

            {currentAIMode === 'personalize' && (
              <div>
                <div className="mb-4">
                  <button
                    onClick={() => setCurrentAIMode('select')}
                    className="text-blue-600 hover:text-blue-800 flex items-center"
                  >
                    ‚Üê „É¢„Éº„ÉâÈÅ∏Êäû„Å´Êàª„Çã
                  </button>
                </div>
                <PersonalizeMode
                  userKnowledge={userKnowledge}
                  onKnowledgeUpdate={setUserKnowledge}
                />
              </div>
            )}

            {currentAIMode === 'companion' && (
              <div>
                <div className="mb-4">
                  <button
                    onClick={() => setCurrentAIMode('select')}
                    className="text-blue-600 hover:text-blue-800 flex items-center"
                  >
                    ‚Üê „É¢„Éº„ÉâÈÅ∏Êäû„Å´Êàª„Çã
                  </button>
                </div>
                <CompanionMode />
              </div>
            )}
          </div>
        )}

        {userRole === 'STUDENT' && currentView === 'student-messages' && (
          <div>
            <div className="mb-6">
              <h1 className="text-2xl font-bold mb-2">Ë¨õÂ∏´„Å∏„ÅÆË≥™Âïè</h1>
              <p className="text-gray-600">ÂàÜ„Åã„Çâ„Å™„ÅÑ„Åì„Å®„Åå„ÅÇ„Çå„Å∞„ÄÅ„ÅÑ„Å§„Åß„ÇÇË¨õÂ∏´„Å´Ë≥™Âïè„Åó„Å¶„Åè„Å†„Åï„ÅÑ</p>
            </div>
            <div className="h-[calc(100vh-250px)]">
              <StudentMessages currentUser={currentUser} />
            </div>
          </div>
        )}

        {userRole === 'INSTRUCTOR' && currentView === 'dashboard' && (
          <InstructorDashboard />
        )}
        
        {userRole === 'INSTRUCTOR' && currentView === 'messages' && (
          <div>
            <div className="mb-6">
              <h1 className="text-2xl font-bold mb-2">ÂèóË¨õÁîü„Å®„ÅÆ„É°„ÉÉ„Çª„Éº„Ç∏</h1>
              <p className="text-gray-600">ÂèóË¨õÁîü„Åã„Çâ„ÅÆË≥™Âïè„ÇÑÁõ∏Ë´á„Å´ÂØæÂøú„Åß„Åç„Åæ„Åô</p>
            </div>
            <div className="h-[calc(100vh-250px)]">
              <InstructorMessages />
            </div>
          </div>
        )}
        
        {userRole === 'INSTRUCTOR' && currentView === 'invites' && (
          <InviteManager currentUser={currentUser} />
        )}
        
        {currentView === 'settings' && (
          <ProfileSettings
            currentUser={currentUser}
            onUpdateUser={(updatedUser) => {
              setCurrentUser(updatedUser);
              localStorage.setItem('currentUser', JSON.stringify(updatedUser));
            }}
            onClose={() => {
              // Ââç„ÅÆÁîªÈù¢„Å´Êàª„Çã
              updateCurrentView(userRole === 'STUDENT' ? 'goals' : 'dashboard');
            }}
          />
        )}
      </div>

      {/* ÂèóË¨õÁîüÁî®„ÅÆÊµÆÂãï„Ç¢„ÇØ„Ç∑„Éß„É≥„Éú„Çø„É≥ */}
      {userRole === 'STUDENT' && <FloatingActionButton currentUser={currentUser} />}

      {/* ÁõÆÊ®ôËøΩÂä†„É¢„Éº„ÉÄ„É´ */}
      {showGoalModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <h2 className="text-xl font-bold mb-6">
              {editingGoal ? 'ÁõÆÊ®ô„ÇíÁ∑®ÈõÜ' : 'Êñ∞„Åó„ÅÑÁõÆÊ®ô„ÇíËøΩÂä†'}
            </h2>
            <form onSubmit={(e) => {
              e.preventDefault()
              const formData = new FormData(e.target)
              const goalType = formData.get('goalType')
              const unitValue = formData.get('unit')
              const customUnit = formData.get('customUnit')
              
              // „Ç´„Çπ„Çø„É†Âçò‰Ωç„ÅåÈÅ∏Êäû„Åï„Çå„ÅüÂ†¥Âêà„ÅØ„ÄÅcustomUnit „ÅÆÂÄ§„Çí‰ΩøÁî®
              const finalUnit = unitValue === 'custom' ? customUnit : unitValue
              
              const newGoal = {
                id: editingGoal ? editingGoal.id : Date.now(),
                title: formData.get('title'),
                description: formData.get('description'),
                unit: finalUnit,
                aggregationMethod: formData.get('aggregationMethod'),
                targetValue: parseFloat(formData.get('targetValue')),
                startDate: formData.get('startDate'),
                endDate: formData.get('endDate'),
                progress: editingGoal ? editingGoal.progress : 0,
                deadline: formData.get('endDate'), // ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ
                goalType: goalType,
                // ÂèÇËÄÉÊõ∏ÁõÆÊ®ô„ÅÆËøΩÂä†È†ÖÁõÆ
                totalPages: goalType === 'book' ? parseInt(formData.get('totalPages')) : null,
                excludeDays: goalType === 'book' ? Array.from(formData.getAll('excludeDays')).map(d => parseInt(d)) : [],
                dailyPages: null // Âæå„ÅßË®àÁÆó
              }
              
              // ÂèÇËÄÉÊõ∏ÁõÆÊ®ô„ÅÆÂ†¥Âêà„ÄÅÂ≠¶ÁøíË®àÁîª„ÇíËá™ÂãïÁîüÊàê
              if (goalType === 'book' && newGoal.totalPages && newGoal.startDate && newGoal.endDate) {
                const studyPlan = generateBookStudyPlan(newGoal)
                newGoal.dailyPages = studyPlan.dailyPages
                
                // ÊúàÈñì„Ç´„É¨„É≥„ÉÄ„Éº„Å´ÂèçÊò†
                const newStudyPlans = { ...studyPlans }
                studyPlan.schedule.forEach(day => {
                  const dateKey = day.date
                  if (!newStudyPlans[dateKey]) {
                    newStudyPlans[dateKey] = []
                  }
                  newStudyPlans[dateKey].push({
                    id: `${newGoal.id}-${dateKey}`,
                    bookTitle: newGoal.title,
                    startPage: day.startPage,
                    endPage: day.endPage,
                    pages: day.pages,
                    type: 'book-goal'
                  })
                })
                setStudyPlans(newStudyPlans)
                
                // ‰ªäÊó•„ÅÆÊó•‰ªò„ÅÆ„Çø„Çπ„ÇØ„Åå„ÅÇ„Çå„Å∞„ÄÅ‰ªäÊó•„ÅÆ„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´ËøΩÂä†
                const today = new Date()
                const todayKey = today.toISOString().split('T')[0]
                const todayPlans = studyPlan.schedule.filter(day => day.date === todayKey)
                
                if (todayPlans.length > 0) {
                  const todayTasks = convertPlansToTasks(todayPlans.map(day => ({
                    id: `${newGoal.id}-${day.date}`,
                    bookTitle: newGoal.title,
                    startPage: day.startPage,
                    endPage: day.endPage,
                    pages: day.pages,
                    type: 'book-goal'
                  })))
                  
                  setTodayTasks(prevTasks => {
                    const existingTaskIds = prevTasks.map(task => task.id)
                    const newTasks = todayTasks.filter(task => !existingTaskIds.includes(task.id))
                    return [...prevTasks, ...newTasks]
                  })
                }
              }
              
              if (editingGoal) {
                setGoals(goals.map(goal => goal.id === editingGoal.id ? newGoal : goal))
              } else {
                setGoals([...goals, newGoal])
                
                // „ÉÅ„Çß„ÉÉ„ÇØ„Éù„Ç§„É≥„Éà: ÂàùÂõû„Ç¥„Éº„É´‰ΩúÊàê
                if (goals.length === 0) {
                  sessionService.recordCheckpoint(sessionService.CHECKPOINTS.FIRST_GOAL_CREATED, {
                    goalId: newGoal.id,
                    goalTitle: newGoal.title,
                    goalType: goalType,
                    userId: currentUser?.id,
                    timestamp: new Date().toISOString()
                  })
                }
              }
              
              setShowGoalModal(false)
              setEditingGoal(null)
            }}>
              <div className="space-y-6">
                {/* ÁõÆÊ®ô„Çø„Ç§„Éó */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ÁõÆÊ®ô„Çø„Ç§„Éó <span className="text-red-500">*</span>
                  </label>
                  <select
                    name="goalType"
                    defaultValue={editingGoal?.goalType || 'general'}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                    onChange={(e) => {
                      const goalTypeInputs = document.querySelectorAll('.goal-type-specific')
                      goalTypeInputs.forEach(input => {
                        input.style.display = e.target.value === 'book' ? 'block' : 'none'
                      })
                    }}
                  >
                    <option value="general">‰∏ÄËà¨ÁõÆÊ®ô</option>
                    <option value="book">ÂèÇËÄÉÊõ∏ÁõÆÊ®ô</option>
                  </select>
                </div>

                {/* „Çø„Ç§„Éà„É´ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    „Çø„Ç§„Éà„É´ <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="text"
                    name="title"
                    defaultValue={editingGoal?.title || ''}
                    placeholder="„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                {/* Ë™¨Êòé */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Ë™¨Êòé
                  </label>
                  <textarea
                    name="description"
                    defaultValue={editingGoal?.description || ''}
                    placeholder="Ë™¨Êòé„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                    rows="3"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                {/* ÂèÇËÄÉÊõ∏Â∞ÇÁî®È†ÖÁõÆ */}
                <div className="goal-type-specific" style={{ display: editingGoal?.goalType === 'book' ? 'block' : 'none' }}>
                  <div className="bg-blue-50 p-4 rounded-lg space-y-4">
                    <h4 className="font-medium text-blue-900">ÂèÇËÄÉÊõ∏Â≠¶ÁøíË®≠ÂÆö</h4>
                    
                    {/* Á∑è„Éö„Éº„Ç∏Êï∞ */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Á∑è„Éö„Éº„Ç∏Êï∞ <span className="text-red-500">*</span>
                      </label>
                      <input
                        type="number"
                        name="totalPages"
                        defaultValue={editingGoal?.totalPages || ''}
                        placeholder="300"
                        min="1"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                      />
                    </div>

                    {/* Èô§Â§ñ„Åô„ÇãÊõúÊó• */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Â≠¶Áøí„Åó„Å™„ÅÑÊõúÊó•
                      </label>
                      <div className="grid grid-cols-7 gap-2">
                        {['Êó•', 'Êúà', 'ÁÅ´', 'Ê∞¥', 'Êú®', 'Èáë', 'Âúü'].map((day, index) => (
                          <label key={index} className="flex items-center space-x-1">
                            <input
                              type="checkbox"
                              name="excludeDays"
                              value={index}
                              defaultChecked={editingGoal?.excludeDays?.includes(index)}
                              className="rounded"
                            />
                            <span className="text-sm">{day}</span>
                          </label>
                        ))}
                      </div>
                      <p className="text-xs text-gray-500 mt-1">
                        „ÉÅ„Çß„ÉÉ„ÇØ„Åó„ÅüÊõúÊó•„ÅØÂ≠¶ÁøíË®àÁîª„Åã„ÇâÈô§Â§ñ„Åï„Çå„Åæ„Åô
                      </p>
                    </div>
                  </div>
                </div>

                {/* Âçò‰Ωç */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Âçò‰Ωç <span className="text-red-500">*</span>
                  </label>
                  <select
                    name="unit"
                    defaultValue={editingGoal && !['‰ª∂', 'ÂÜÜ', '%', '‰∫∫', 'ÊôÇÈñì', '„Éö„Éº„Ç∏', 'ÂïèÈ°å', 'ÁÇπ'].includes(editingGoal.unit) ? 'custom' : (editingGoal?.unit || '')}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                    onChange={(e) => {
                      const customUnitInput = document.getElementById('customUnitInput')
                      if (e.target.value === 'custom') {
                        customUnitInput.style.display = 'block'
                        customUnitInput.querySelector('input').required = true
                      } else {
                        customUnitInput.style.display = 'none'
                        customUnitInput.querySelector('input').required = false
                        customUnitInput.querySelector('input').value = ''
                      }
                    }}
                  >
                    <option value="">Âçò‰Ωç„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
                    <option value="‰ª∂">‰ª∂</option>
                    <option value="ÂÜÜ">ÂÜÜ</option>
                    <option value="%">%</option>
                    <option value="‰∫∫">‰∫∫</option>
                    <option value="ÊôÇÈñì">ÊôÇÈñì</option>
                    <option value="„Éö„Éº„Ç∏">„Éö„Éº„Ç∏</option>
                    <option value="ÂïèÈ°å">ÂïèÈ°å</option>
                    <option value="ÁÇπ">ÁÇπ</option>
                    <option value="custom">„Ç´„Çπ„Çø„É†</option>
                  </select>
                  <div
                    id="customUnitInput"
                    style={{ display: editingGoal && !['‰ª∂', 'ÂÜÜ', '%', '‰∫∫', 'ÊôÇÈñì', '„Éö„Éº„Ç∏', 'ÂïèÈ°å', 'ÁÇπ'].includes(editingGoal.unit) ? 'block' : 'none' }}
                    className="mt-2"
                  >
                    <input
                      type="text"
                      name="customUnit"
                      defaultValue={editingGoal && !['‰ª∂', 'ÂÜÜ', '%', '‰∫∫', 'ÊôÇÈñì', '„Éö„Éº„Ç∏', 'ÂïèÈ°å', 'ÁÇπ'].includes(editingGoal.unit) ? editingGoal.unit : ''}
                      placeholder="„Ç´„Çπ„Çø„É†Âçò‰Ωç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
                      className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    />
                  </div>
                </div>

                {/* ÈõÜË®àÊñπÈáù */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ÈõÜË®àÊñπÈáù <span className="text-red-500">*</span>
                  </label>
                  <select
                    name="aggregationMethod"
                    defaultValue={editingGoal?.aggregationMethod || ''}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  >
                    <option value="">ÈõÜË®àÊñπÈáù„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ</option>
                    <option value="ÂêàË®àÔºà‰∏äÂõû„Çå„Å∞ÈÅîÊàêÔºâ">ÂêàË®àÔºà‰∏äÂõû„Çå„Å∞ÈÅîÊàêÔºâ</option>
                    <option value="ÂêàË®àÔºà‰∏ãÂõû„Çå„Å∞ÈÅîÊàêÔºâ">ÂêàË®àÔºà‰∏ãÂõû„Çå„Å∞ÈÅîÊàêÔºâ</option>
                    <option value="Âπ≥ÂùáÔºà‰∏äÂõû„Çå„Å∞ÈÅîÊàêÔºâ">Âπ≥ÂùáÔºà‰∏äÂõû„Çå„Å∞ÈÅîÊàêÔºâ</option>
                    <option value="Âπ≥ÂùáÔºà‰∏ãÂõû„Çå„Å∞ÈÅîÊàêÔºâ">Âπ≥ÂùáÔºà‰∏ãÂõû„Çå„Å∞ÈÅîÊàêÔºâ</option>
                    <option value="ÊúÄÂ§ßÔºà‰∏äÂõû„Çå„Å∞ÈÅîÊàêÔºâ">ÊúÄÂ§ßÔºà‰∏äÂõû„Çå„Å∞ÈÅîÊàêÔºâ</option>
                    <option value="ÊúÄÂ§ßÔºà‰∏ãÂõû„Çå„Å∞ÈÅîÊàêÔºâ">ÊúÄÂ§ßÔºà‰∏ãÂõû„Çå„Å∞ÈÅîÊàêÔºâ</option>
                    <option value="ÊúÄÂ∞èÔºà‰∏äÂõû„Çå„Å∞ÈÅîÊàêÔºâ">ÊúÄÂ∞èÔºà‰∏äÂõû„Çå„Å∞ÈÅîÊàêÔºâ</option>
                    <option value="ÊúÄÂ∞èÔºà‰∏ãÂõû„Çå„Å∞ÈÅîÊàêÔºâ">ÊúÄÂ∞èÔºà‰∏ãÂõû„Çå„Å∞ÈÅîÊàêÔºâ</option>
                  </select>
                </div>

                {/* ÁõÆÊ®ôÊï∞ÂÄ§ */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ÁõÆÊ®ôÊï∞ÂÄ§ <span className="text-red-500">*</span>
                  </label>
                  <input
                    type="number"
                    name="targetValue"
                    defaultValue={editingGoal?.targetValue || ''}
                    placeholder="1"
                    step="0.01"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  />
                </div>

                {/* ÊúüÈñì */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ÊúüÈñì <span className="text-red-500">*</span>
                  </label>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <input
                        type="date"
                        name="startDate"
                        defaultValue={editingGoal?.startDate || new Date().toISOString().split('T')[0]}
                        placeholder="ÈñãÂßãÊó•„ÇíÈÅ∏Êäû"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required
                      />
                    </div>
                    <div className="flex items-center">
                      <span className="mx-2 text-gray-500">„Äú</span>
                      <input
                        type="date"
                        name="endDate"
                        defaultValue={editingGoal?.endDate || editingGoal?.deadline || ''}
                        placeholder="ÁµÇ‰∫ÜÊó•„ÇíÈÅ∏Êäû"
                        className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required
                      />
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-end space-x-3 mt-8">
                <button
                  type="button"
                  onClick={() => {
                    setShowGoalModal(false)
                    setEditingGoal(null)
                  }}
                  className="px-6 py-2 text-gray-600 border border-gray-300 rounded-md hover:bg-gray-50"
                >
                  „Ç≠„É£„É≥„Çª„É´
                </button>
                <button
                  type="submit"
                  className="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                >
                  ÂÆå‰∫Ü
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

        {/* „É¢„Éê„Ç§„É´Áî®„Çø„Çπ„ÇØ„Éó„Éº„É´„Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó */}
        <MobileTaskPopup
          isOpen={showMobileTaskPopup}
          onClose={() => {
            console.log('üîç Debug - „Éù„ÉÉ„Éó„Ç¢„ÉÉ„Éó„ÇØ„É≠„Éº„Ç∫')
            setShowMobileTaskPopup(false)
          }}
          availableTasks={[...todayTasks, ...dailyTaskPool, ...getOverdueTasks()]}
          selectedDate={selectedCellInfo.date}
          selectedHour={selectedCellInfo.hour}
          onTaskSelect={(task, dateKey, hour) => {
            console.log('üîç Debug - „Çø„Çπ„ÇØÈÅ∏Êäû:', { task, dateKey, hour })
            // „Çø„Çπ„ÇØ„Çí„Ç´„É¨„É≥„ÉÄ„Éº„Å´„Çπ„Ç±„Ç∏„É•„Éº„É´
            const taskKey = `${dateKey}-${hour}`
            const scheduledTask = {
              ...task,
              duration: task.duration || 1
            }
            
            setScheduledTasks(prev => ({
              ...prev,
              [taskKey]: scheduledTask
            }))
            
            // „Çø„Çπ„ÇØ„Éó„Éº„É´„Åã„ÇâÂâäÈô§
            const today = new Date().toISOString().split('T')[0]
            if (dateKey === today) {
              setTodayTasks(prev => prev.filter(t => t.id !== task.id))
            } else {
              setDailyTaskPool(prev => prev.filter(t => t.id !== task.id))
            }
            
            // Êú™ÈÅîÊàê„Çø„Çπ„ÇØ„ÅÆÂ†¥Âêà„ÅØ„ÄÅallTasksHistory„Åã„Çâ„ÇÇÂâäÈô§
            if (task.originalDate) {
              setAllTasksHistory(prev => {
                const updated = { ...prev }
                if (updated[task.originalDate]) {
                  updated[task.originalDate] = updated[task.originalDate].filter(t => t.id !== task.id)
                  if (updated[task.originalDate].length === 0) {
                    delete updated[task.originalDate]
                  }
                }
                return updated
              })
            }
          }}
          onAddNewTask={(newTask) => {
            console.log('üîç Debug - Êñ∞Ë¶è„Çø„Çπ„ÇØËøΩÂä†:', newTask)
            // Êñ∞„Åó„ÅÑ„Çø„Çπ„ÇØ„ÇíÁõ¥Êé•„Ç´„É¨„É≥„ÉÄ„Éº„Çª„É´„Å´ÈÖçÁΩÆ
            const dateKey = selectedCellInfo.date
            const hour = selectedCellInfo.hour
            const taskKey = `${dateKey}-${hour}`
            
            // „Çª„É´„ÅåÁ©∫„ÅÑ„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
            if (!scheduledTasks[taskKey]) {
              const scheduledTask = {
                ...newTask,
                duration: newTask.duration || 1
              }
              
              setScheduledTasks(prev => ({
                ...prev,
                [taskKey]: scheduledTask
              }))
              
              console.log('‚úÖ Êñ∞Ë¶è„Çø„Çπ„ÇØ„ÇíÁõ¥Êé•„Çª„É´„Å´ÈÖçÁΩÆ:', { taskKey, scheduledTask })
            } else {
              // „Çª„É´„ÅåÂç†Êúâ„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØ„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´ËøΩÂä†
              const today = new Date().toISOString().split('T')[0]
              const selectedDateKey = selectedCellInfo.date
              
              if (selectedDateKey === today) {
                setTodayTasks(prev => [...prev, newTask])
              } else {
                setDailyTaskPool(prev => [...prev, newTask])
              }
              
              console.log('‚ö†Ô∏è „Çª„É´„ÅåÂç†Êúâ„Åï„Çå„Å¶„ÅÑ„Çã„Åü„ÇÅ„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´ËøΩÂä†:', newTask)
            }
          }}
        />
        </div>

        {/* „Çø„Çπ„ÇØÂâäÈô§Á¢∫Ë™ç„ÉÄ„Ç§„Ç¢„É≠„Ç∞ */}
        {showDeleteConfirm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
            <div className="bg-white rounded-lg p-6 w-full max-w-md">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">
                „Çø„Çπ„ÇØ„Çí„Çø„Çπ„ÇØ„Éó„Éº„É´„Å´Êàª„Åó„Åæ„Åô„ÅãÔºü
              </h3>
              <p className="text-gray-600 mb-6">
                {showDeleteConfirm.message}
              </p>
              <div className="flex space-x-3">
                <button
                  onClick={cancelTaskRemoval}
                  className="flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors"
                >
                  „Ç≠„É£„É≥„Çª„É´
                </button>
                <button
                  onClick={confirmTaskRemoval}
                  className="flex-1 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
                >
                  „Çø„Çπ„ÇØ„Éó„Éº„É´„Å´Êàª„Åô
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    )
}

export default App