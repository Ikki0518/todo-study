/**
 * „Çª„Éº„ÉïAPI„Çµ„Éº„Éì„Çπ - „Çµ„É≠„Ç≤„Éº„ÉàÊñáÂ≠ó„Ç®„É©„ÉºÂØæÂøú
 * „Äåinvalid high surrogate in string„Äç„Ç®„É©„Éº„ÇíÈò≤„Åê„Åü„ÇÅ„ÅÆÂÆâÂÖ®„Å™APIÈÄö‰ø°
 */

import { 
  sanitizeObjectForJSON, 
  isValidForJSON, 
  detectProblematicChars, 
  toSafeLogString 
} from '../utils/stringUtils.js';

/**
 * „Ç®„É©„ÉºÂ†±Âëä„Çµ„Éº„Éì„Çπ
 */
const reportError = (errorType, details) => {
  console.error(`[${errorType}]`, details);
  
  // Êú¨Áï™Áí∞Â¢É„Åß„ÅØÂ§ñÈÉ®„ÅÆ„Ç®„É©„ÉºËøΩË∑°„Çµ„Éº„Éì„Çπ„Å´ÈÄÅ‰ø°
  if (import.meta.env.PROD) {
    // ‰æã: Sentry, LogRocket, etc.
    // sentry.captureException(new Error(errorType), { extra: details });
  }
};

/**
 * JSON„Çµ„É≠„Ç≤„Éº„ÉàÊñáÂ≠ó„Ç®„É©„Éº„ÅÆ„Éè„É≥„Éâ„É™„É≥„Ç∞
 */
export const handleJSONError = (error, data) => {
  if (error.message.includes('invalid high surrogate')) {
    const problemDetails = typeof data === 'string' 
      ? detectProblematicChars(data)
      : { hasProblems: false, details: [] };
      
    console.error('„Çµ„É≠„Ç≤„Éº„ÉàÊñáÂ≠ó„Ç®„É©„ÉºË©≥Á¥∞:', {
      error: error.message,
      dataType: typeof data,
      dataLength: data?.toString()?.length,
      problematicChars: problemDetails.details,
      safePreview: toSafeLogString(data, 200)
    });
    
    reportError('JSON_SURROGATE_ERROR', {
      userAgent: navigator.userAgent,
      timestamp: new Date().toISOString(),
      errorMessage: error.message,
      dataPreview: toSafeLogString(data, 500)
    });
    
    return true; // „Åì„ÅÆ„Ç®„É©„Éº„ÇíÂá¶ÁêÜÊ∏à„Åø„Å®„Éû„Éº„ÇØ
  }
  return false;
};

/**
 * ÂÆâÂÖ®„Å™JSONÂ§âÊèõ
 */
export const safeJSONStringify = (data, fallbackValue = '{}') => {
  try {
    // „Åæ„ÅöÂÖÉ„Éá„Éº„Çø„Åß„ÉÜ„Çπ„Éà
    if (isValidForJSON(data)) {
      return JSON.stringify(data);
    }
    
    console.warn('ÂÖÉ„Éá„Éº„Çø„ÅåJSONÂ§âÊèõ„Åß„Åç„Åæ„Åõ„Çì„ÄÇ„Çµ„Éã„Çø„Ç§„Ç∫„ÇíÂÆüË°å...');
    
    // „Çµ„Éã„Çø„Ç§„Ç∫„Åó„Å¶„É™„Éà„É©„Ç§
    const sanitizedData = sanitizeObjectForJSON(data);
    const jsonString = JSON.stringify(sanitizedData);
    
    console.log('„Çµ„Éã„Çø„Ç§„Ç∫Âæå„ÅÆJSONÂ§âÊèõÊàêÂäü');
    return jsonString;
    
  } catch (error) {
    const handled = handleJSONError(error, data);
    
    if (handled) {
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂá¶ÁêÜ
      console.warn('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂÄ§„Çí‰ΩøÁî®:', fallbackValue);
      return fallbackValue;
    }
    
    throw error; // ‰ªñ„ÅÆ„Ç®„É©„Éº„ÅØÂÜçthrow
  }
};

/**
 * ÂÆâÂÖ®„Å™API„É™„ÇØ„Ç®„Çπ„Éà
 */
export const safeFetch = async (url, options = {}) => {
  const { body, ...restOptions } = options;
  
  try {
    let processedBody = body;
    
    // body„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅÆÂá¶ÁêÜ
    if (body && typeof body === 'object') {
      console.log('API„É™„ÇØ„Ç®„Çπ„Éà„Éá„Éº„Çø„Çí„Çµ„Éã„Çø„Ç§„Ç∫‰∏≠...');
      
      // 1. „Éá„Éº„Çø„ÅÆ„Çµ„Éã„Çø„Ç§„Ç∫
      const sanitizedData = sanitizeObjectForJSON(body);
      
      // 2. JSONÂ§âÊèõ„ÉÜ„Çπ„Éà
      const jsonString = safeJSONStringify(sanitizedData);
      
      console.log('ÈÄÅ‰ø°„Éá„Éº„Çø„Çµ„Ç§„Ç∫:', jsonString.length, 'bytes');
      processedBody = jsonString;
    }
    
    // 3. „É™„ÇØ„Ç®„Çπ„ÉàÈÄÅ‰ø°
    const response = await fetch(url, {
      ...restOptions,
      body: processedBody,
      headers: {
        'Content-Type': 'application/json; charset=utf-8',
        ...restOptions.headers,
      },
    });
    
    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API Error: ${response.status} - ${errorText}`);
    }
    
    return response;
    
  } catch (error) {
    console.error('APIÈÄÅ‰ø°„Ç®„É©„Éº:', error);
    
    // „Çµ„É≠„Ç≤„Éº„ÉàÊñáÂ≠ó„Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅÆËøΩÂä†Âá¶ÁêÜ
    if (handleJSONError(error, body)) {
      // Á∑äÊÄ•ÂõûÈÅøÁ≠ñÔºöASCIIÊñáÂ≠ó„ÅÆ„Åø„Åß„É™„Éà„É©„Ç§
      console.log('ASCIIÊñáÂ≠ó„ÅÆ„Åø„Åß„É™„Éà„É©„Ç§„ÇíÂÆüË°å...');
      
      const asciiOnlyBody = JSON.stringify(body).replace(/[^\x00-\x7F]/g, '');
      
      return fetch(url, {
        ...restOptions,
        body: asciiOnlyBody,
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
          ...restOptions.headers,
        },
      });
    }
    
    throw error;
  }
};

/**
 * POST „É™„ÇØ„Ç®„Çπ„ÉàÂ∞ÇÁî®
 */
export const safePost = async (url, data) => {
  return safeFetch(url, {
    method: 'POST',
    body: data,
  });
};

/**
 * PUT „É™„ÇØ„Ç®„Çπ„ÉàÂ∞ÇÁî®  
 */
export const safePut = async (url, data) => {
  return safeFetch(url, {
    method: 'PUT',
    body: data,
  });
};

/**
 * PATCH „É™„ÇØ„Ç®„Çπ„ÉàÂ∞ÇÁî®
 */
export const safePatch = async (url, data) => {
  return safeFetch(url, {
    method: 'PATCH',
    body: data,
  });
};

/**
 * „É¨„Çπ„Éù„É≥„Çπ„Éá„Éº„Çø„ÅÆÂÆâÂÖ®„Å™Ëß£Êûê
 */
export const safeParseResponse = async (response) => {
  try {
    const text = await response.text();
    
    // Á©∫„ÅÆ„É¨„Çπ„Éù„É≥„Çπ„ÅÆÂ†¥Âêà
    if (!text.trim()) {
      return null;
    }
    
    // „Çµ„Éã„Çø„Ç§„Ç∫„Åó„Å¶„Åã„Çâ„Éë„Éº„Çπ
    const sanitizedText = sanitizeObjectForJSON(text);
    return JSON.parse(sanitizedText);
    
  } catch (error) {
    console.error('„É¨„Çπ„Éù„É≥„ÇπËß£Êûê„Ç®„É©„Éº:', error);
    
    if (handleJSONError(error, text)) {
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Á©∫„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÇíËøî„Åô
      return {};
    }
    
    throw error;
  }
};

/**
 * WebSocketÈÄÅ‰ø°ÊôÇ„ÅÆÂÆâÂÖ®„Å™„Éá„Éº„ÇøÂá¶ÁêÜ
 */
export const safeSendWebSocket = (websocket, data) => {
  try {
    const jsonString = safeJSONStringify(data);
    websocket.send(jsonString);
    
  } catch (error) {
    console.error('WebSocketÈÄÅ‰ø°„Ç®„É©„Éº:', error);
    
    if (handleJSONError(error, data)) {
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Ç®„É©„ÉºÈÄöÁü•„ÅÆ„ÅøÈÄÅ‰ø°
      websocket.send(JSON.stringify({ 
        error: '„Éá„Éº„ÇøÈÄÅ‰ø°„Ç®„É©„Éº', 
        timestamp: new Date().toISOString() 
      }));
    }
  }
};

/**
 * „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Å∏„ÅÆÂÆâÂÖ®„Å™‰øùÂ≠ò
 */
export const safeSetLocalStorage = (key, data) => {
  try {
    const jsonString = safeJSONStringify(data);
    localStorage.setItem(key, jsonString);
    
  } catch (error) {
    console.error('„É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏‰øùÂ≠ò„Ç®„É©„Éº:', error);
    
    if (handleJSONError(error, data)) {
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: „Éá„Éº„Çø„ÇíÊñáÂ≠óÂàóÂåñ„Åó„Å¶ASCIIÊñáÂ≠ó„ÅÆ„Åø„Åß‰øùÂ≠ò
      const fallbackString = String(data).replace(/[^\x00-\x7F]/g, '');
      localStorage.setItem(key, JSON.stringify({ 
        data: fallbackString, 
        sanitized: true,
        timestamp: new Date().toISOString()
      }));
    }
  }
};

/**
 * ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„Éá„Éê„ÉÉ„Ç∞ÊÉÖÂ†±
 */
export const debugStringData = (data, label = 'Data') => {
  if (import.meta.env.DEV) {
    console.group(`üîç [DEBUG] ${label}`);
    console.log('Original:', data);
    console.log('Type:', typeof data);
    
    if (typeof data === 'string') {
      const problems = detectProblematicChars(data);
      console.log('Problems detected:', problems);
      
      if (problems.hasProblems) {
        console.log('Sanitized:', sanitizeStringForJSON(data));
      }
    }
    
    console.log('JSON valid:', isValidForJSON(data));
    console.groupEnd();
  }
};

// „Éá„Éï„Ç©„É´„Éà„Ç®„ÇØ„Çπ„Éù„Éº„Éà
export default {
  safeFetch,
  safePost,
  safePut,
  safePatch,
  safeParseResponse,
  safeSendWebSocket,
  safeSetLocalStorage,
  safeJSONStringify,
  handleJSONError,
  debugStringData
};